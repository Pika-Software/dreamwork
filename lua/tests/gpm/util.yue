from _G import gpm
from gpm import Error

return
    cases:
        *   name: "error(...) must throw always string unless in coroutine"
            func: ->
                import throw from gpm

                -- expect we are in main thread
                expect( coroutine.running() ).to.beNil()

                expectThrowValue = (val, expected) ->
                    if isstring(val) or isnumber(val)
                        expect( throw, val ).to.errWith( expected or val )
                    else
                        ok, err = pcall( throw, val )
                        expect( ok ).to.beFalse()
                        expect( err ).to.equal( expected or val )
                
                expectThrowString = ( val ) ->
                    expectThrowValue( val, tostring(val) )

                -- check throw works as vanilla error inside coroutine
                co = coroutine.create ->
                    expectThrowValue( "foo bar" )
                    expectThrowValue( {} )
                    expectThrowValue( true )
                    expectThrowValue( nil )
                    expectThrowValue( newproxy() )
        
                    expectThrowString( 123 )
                
                unless ok, err := coroutine.resume( co )
                    error( err )
                
                -- check throw always throws value converted to string inside main thread
                expectThrowString( "foo bar" )
                expectThrowString( {} )
                expectThrowString( true )
                expectThrowString( nil )
                expectThrowString( newproxy() )
                expectThrowString( 123 )
                expectThrowString( Error( "hello world" ) )
                
                return


        
