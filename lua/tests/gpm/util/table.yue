from _G import gpm
from gpm import table

return
    cases:
        *   name: "table.IsEmpty(...) must return true if table is empty"
            func: ->
                from table import IsEmpty

                expect( IsEmpty({}) ).to.beTrue()
                expect( IsEmpty({ "hello" }) ).to.beFalse()
                expect( IsEmpty({ nil, "world" }) ).to.beFalse()
                expect( IsEmpty({ foo: "bar" }) ).to.beFalse()
                return

        *   name: "table.Count(...) must return number of elements in table"
            func: ->
                from table import Count

                expect( Count({}) ).to.equal( 0 )
                expect( Count({ "hello" }) ).to.equal( 1 )
                expect( Count({ nil, "world" }) ).to.equal( 1 )
                expect( Count({ foo: "bar" }) ).to.equal( 1 )
                expect( Count({ foo: "bar", hello: "world" }) ).to.equal( 2 )
                expect( Count({ 1, 2, 3, test: "Count", gpm: "Awesome" }) )
                return

        *   name: "table.Equal(...) must return true if tables are equal"
            func: ->
                from table import Equal

                example = {}
                expect( Equal(example, example) ).to.beTrue()
                expect( Equal({}, {}) ).to.beTrue()
                expect( Equal({ "hello" }, { "hello" }) ).to.beTrue()
                expect( Equal({ nil, "world" }, { nil, "world" }) ).to.beTrue()
                expect( Equal({ foo: "bar" }, { foo: "bar" }) ).to.beTrue()
                expect( Equal({ foo: "bar", hello: "world" }, { foo: "bar", hello: "world" }) ).to.beTrue()
                expect( Equal({ 1, 2, 3, test: "Count", gpm: "Awesome" }, { 1, 2, 3, test: "Count", gpm: "Awesome" }) ).to.beTrue()
                expect( Equal({ { nested: "table" } }, { { nested: "table" } }) ).to.beTrue()
                expect( Equal({ false }, { false }) ).to.beTrue()

                expect( Equal({ "hello" }, { "world" }) ).to.beFalse()
                expect( Equal({ nil, "world" }, { "world" }) ).to.beFalse()
                expect( Equal({ foo: "bar" }, { foo: "bar", hello: "world" }) ).to.beFalse()
                expect( Equal({ 1, 2, 3, test: "Count", gpm: "Awesome" }, { 1, 2, 3, test: "Count" }) ).to.beFalse()
                expect( Equal({ { nested: "table" } }, { { nested: "table", unnested: "array" } }) ).to.beFalse()
                return

        *   name: "table.unpack(...) must work same as unpack(...)"
            func: ->
                from table import Equal

                test = ( ... ) ->
                    result1 = { table.unpack(...) }
                    result2 = { unpack(...) }
                    expect( Equal(result1, result2) ).to.beTrue()

                test( {1, 2, 3, 4, 5} )
                test( {1, 2, 3, nil, 5} )
                test( {nil, 2, 3, nil, 5} )
                test( {1, 2, 3, 4, 5}, 1, 5 )
                test( {nil, 2, 3, nil, 5}, 1, 5 )
                test( {nil, 2, 3, nil, 5}, 1, 3 )
                test( {"hello", 1, true, ->, "world", {}, false} )
                test( {} )
                return

        *   name: "table.pack(...) must have .n field and contain all values"
            func: ->
                test = ( ... ) ->
                    n = select("#", ...)
                    result = table.pack(...)
                    expect( result.n ).to.equal( n )

                    expect( table.Equal(result, { n: n, ...}) ).to.beTrue()

                test()
                test(1, 2, 3, 4)
                test(nil, 2, false, "hello", {})
                return

        *   name: "table.Add(...) must work same as original"
            func: ->
                test = ( target, source ) ->
                    targetCopy = table.Copy(target)
                    table.Add(target, source)
                    _G.table.Add(targetCopy, source)
                    expect( table.Equal(target, targetCopy) ).to.beTrue()

                test( {}, {} )
                test( {}, {1, 2, 3} )
                test( {1, 2, 3}, {} )
                test( {1, 2, 3}, {4, 5, 6} )
                test( {"One", "Two"}, {"Three", "Four", "Five"} )
                test( {"One", "Two"}, {nil, "Three", "Four", "Five"} )
                test( {true, false}, { test: "everyting" } )
                return

        *   name: "table.Add(...) with isSequantial=true must work sequantialy"
            func: ->
                test = ( target, source, expected ) ->
                    table.Add(target, source, true)
                    expect( table.Equal(target, expected) ).to.beTrue()

                test( {}, {}, {} )
                test( { 1 }, { 2 }, { 1, 2 } )
                test( { nil, 3, 4 }, { 1, 2, 3 }, { nil, 3, 4, 1, 2, 3 } )
                test( { "never", "gonna", "give", "you" }, { nil, "up" }, { "never", "gonna", "give", "you", nil, "up" } )
                test( { true }, { will: "be", false }, { true, false } )

                t = {}
                t[3] = true
                test( t, { false }, { false, nil, true } )
                return

        *   name: "table.Flip(...) must invert keys and values"
            func: ->
                test = ( input, expected ) ->
                    result1 = table.Flip(input)
                    result2 = table.Flip(input, true)
                    expect( table.Equal(result1, result2) ).to.beTrue()
                    expect( table.Equal(result2, expected) ).to.beTrue()

                test( {}, {} )
                test( { "hello": "world" }, { "world": "hello" } )
                test( { [true]: false }, { [false]: true } )
                test( { [3]: 1 }, { [1]: 3 } )
                test( { "never": "gonna", "give": "you", "up" }, { "gonna": "never", "you": "give", "up": 1 } )
                return

        *   name: "table.Reverse(...) must work same as original"
            func: ->
                test = ( input, expected ) ->
                    result1 = table.Reverse(input)
                    result2 = table.Reverse(input, true)
                    expect( table.Equal(result1, result2) ).to.beTrue()
                    expect( table.Equal(result2, expected) ).to.beTrue()

                test( {}, {} )
                test( { 1, 2, 3 }, { 3, 2, 1 } )
                test( { "hello", "world" }, { "world", "hello" } )
                test( { true, false }, { false, true } )
                test( { nil, 3, 4 }, { 4, 3, nil } )
                test( { "never", "gonna", "give", "you" }, { "you", "give", "gonna", "never" } )
                return

        *   name: "table.HasValue(...) must return true if table has value"
            func: ->
                test = ( input, value, expected, isSequantial ) ->
                    expect( table.HasValue(input, value, isSequantial) ).to.equal( expected )

                test( {}, "hello", false )
                test( { "hello" }, "hello", true )
                test( { "hello" }, "world", false )
                test( { test: "hello" }, "hello", true )

                test( { "hello", "world" }, "hello", true, true )
                test( { "hello", "world" }, "world", true, true )
                test( { "hello", "world" }, "test", false, true )
                test( {1, 2, 3, 4}, "welcome", false, true )
                return

        *   name: "table.Empty(...) must empty any table"
            func: ->
                test = ( input ) ->
                    table.Empty(input)
                    expect( table.IsEmpty(input) ).to.beTrue()

                test( {} )
                test( {1, 2, 3} )
                test( {true, false, "ok"} )
                test( {nil, {}, hello: "world", "test": "empty", foo: {}} )
                return

        *   name: "table.GetKeyCount(...) must return number of keys in table"
            func: ->
                test = ( input, expected ) ->
                    expect( table.GetKeyCount(input) ).to.equal( expected )

                test( {}, 0 )
                test( {1, 2, 3}, 3 )
                test( {true, false, "ok"}, 3 )
                test( {nil, {}, hello: "world", "test": "empty", foo: {}}, 4 )
                test( {nil, {}, hello: "world", "test": "empty", foo: {}, [1]: 2, [3]: 4}, 6 )
                return

        *   name: "table.GetKeys(...) must return all keys in table"
            func: ->
                test = ( input, expected ) ->
                    result = table.GetKeys(input)
                    expect( table.Equal(result, expected) ).to.beTrue()

                test( {}, {} )
                test( {1, 2, 3}, {1, 2, 3} )
                test( {true, false, "ok"}, {1, 2, 3} )
                test( {nil, {}, hello: "world", "test": "empty", foo: {}}, {2, "hello", "test", "foo"} )
                test( { [false]: true }, { false })
                return

        *   name: "table.GetValues(...) must return all values in table"
            func: ->
                test = ( input, expected ) ->
                    result = table.GetValues(input)
                    expect( table.Equal(result, expected) ).to.beTrue()

                test( {}, {} )
                test( {1, 2, 3}, {1, 2, 3} )
                test( {true, false, "ok"}, {true, false, "ok"} )
                test( {nil, {}, hello: "world", "test": "empty", foo: {}}, {{}, "world", "empty", {}} )
                test( { [false]: true }, { true })
                return

        *   name: "table.IsSequential(...) must return true if table is sequential"
            func: ->
                test = ( input, expected ) ->
                    expect( table.IsSequential(input) ).to.equal( expected )

                test( {}, true )
                test( {1, 2, 3}, true )
                test( {true, false, "ok"}, true )
                test( {nil, {}, hello: "world", "test": "empty", foo: {}}, false )
                test( { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 }, true )
                test( { [false]: true }, false)
                return

        *   name: "table.RemoveByValue(...) must remove value from table"
            func: ->
                test = ( input, value, expected, isSequantial ) ->
                    table.RemoveByValue(input, value, isSequantial)
                    expect( table.Equal(input, expected) ).to.beTrue()

                test( {}, "hello", {}, false )
                test( { "hello" }, "hello", {}, false )
                test( { "hello" }, "world", { "hello" }, false )
                test( { "hello", "world" }, "hello", { "world" }, true )
                test( { "hello", "world" }, "world", { "hello" }, true )
                test( { "hello", "world" }, "test", { "hello", "world" }, true )
                test( {1, 2, 3, 4}, "welcome", {1, 2, 3, 4}, true )
                return

        *   name: "table.RemoveSameValues(...) must remove multiple same values"
            func: ->
                test = ( input, value, expected, isSequantial ) ->
                    table.RemoveSameValues(input, value, isSequantial)
                    expect( table.Equal(input, expected) ).to.beTrue()

                test( {}, "hello", {}, false )
                test( { "hello" }, "hello", {}, false )
                test( { "hello" }, "world", { "hello" }, false )
                test( { "hello", "world" }, "hello", { "world" }, true )
                test( { "hello", "world" }, "world", { "hello" }, true )
                test( { "hello", "world" }, "test", { "hello", "world" }, true )
                test( {1, 2, 3, 4}, "welcome", {1, 2, 3, 4}, true )
                test( {1, 2, 3, 4, 1, 2, 3, 4}, 1, {2, 3, 4, 2, 3, 4}, true )
                test( {1, 2, 3, 4, 1, 2, 3, 4}, 1, {2, 3, 4, 2, 3, 4}, true )
                test( {1, 2, 3, 4, 1, 2, 3, 4}, 1, {2, 3, 4, 2, 3, 4}, true )
                return

        *   name: "table.GetValue(...) must tranverse table with given key delimited by '.'"
            func: ->
                test = ( tbl, key, expected ) ->
                    expect( table.GetValue(tbl, key) ).to.equal( expected )

                test( {}, "test", nil )
                test( { "test": "works" }, "test", "works" )
                test( { "test": { "works": "fine" } }, "test.works", "fine" )
                test( { "test": { "works": { "fine": "too" } } }, "test.works.fine", "too" )
                test( { "test": { "works": { "fine": "too" } } }, "test.works.fine.ok", nil )
                test( { "test": { "works": { "fine": "too" } } }, "test.wont.work.really", nil )
                test( {}, "test.wont.work.really", nil )
                return

        *   name: "table.SetValue(...) must set value by given key delimited by '.' and create missing tables"
            func: ->
                test = ( tbl, key, value, expected ) ->
                    table.SetValue(tbl, key, value)
                    expect( table.Equal(tbl, expected) ).to.beTrue()

                test( {}, "test", "works", { test: "works" } )
                test( { test: "works" }, "test", "fine", { test: "fine" } )
                test( { test: "fine" }, "test.works", "fine", { test: { works: "fine" } } )
                test( { test: { works: "fine" } }, "test.works.fine", "too", { test: { works: { fine: "too" } } } )
                test( { test: { works: { fine: "too" } } }, "test.works.fine", "too", { test: { works: { fine: "too" } } } )
                test( { test: { works: { fine: "too" } } }, "test.works.fine.ok", "too", { test: { works: { fine: { ok: "too" } } } } )
                test( { test: { works: { fine: "too" } } }, "test.wont.work.really", "too", { test: { works: { fine: "too" }, wont: { work: { really: "too" } } } } )
                test( {}, "test.wont.work.really", "too", { test: { wont: { work: { really: "too" } } } } )
                return

        *   name: "table.Slice(...) must return a slice of given table"
            func: ->
                test = ( tbl, startPos, endPos ) ->
                    result = table.Slice(tbl, startPos, endPos)
                    expect( table.Equal(result, { table.unpack(tbl, startPos, endPos) }) ).to.beTrue()

                test( {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1, 5 )
                test( {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 7 )
                test( {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 10 )
                test( {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1, 10 )
                test( {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 1, 1 )
                test( {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 10, 10 )
                test( {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 10, 1 )
                test( { false, true, nil, "hello" }, 1, 4 )
                test( { false, true, nil, "hello" }, 2, 3 )
                return

        *   name: "table.Shuffle(...) must shuffle randomly given tabel"
            func: ->
                tbl = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
                result = table.Shuffle( table.Copy(tbl) )
                expect( table.Equal(result, tbl) ).to.beFalse()
                expect( table.Count(result) ).to.equal( table.Count(tbl) )
                expect( table.GetKeyCount(result) ).to.equal( table.GetKeyCount(tbl) )
                expect( table.Equal(table.GetKeys( tbl ), table.GetKeys( result )) ).to.beTrue()
                expect( table.Equal(table.GetValues( tbl ), table.GetValues( result )) ).to.beFalse()
                return

        *   name: "table.Random(...) must return random key and value from given table"
            func: ->
                test = ( tbl, isSequantial ) ->
                    value, key = table.Random(tbl, isSequantial)
                    expect( tbl[key] ).to.equal( value )
                    -- cant really test randomness here
                    return

                test( {1, 2, 3, 4, 5, 6, 7, 8, 9} )
                test( {1, 2, 3, 4, 5, 6, 7, 8, 9}, true )
                test( { "hello": "world", "test": "this", "very", "random", "test": "that", "must": "not", "fail" } )
                test( { true, false, nil, true, false, nil, false } )
                test( { true, false, nil, true, false, nil, false }, true )
                return

        *   name: "table.LowerKeyNames(...) must lowercase each key in table"
            func: ->
                test = ( tbl, expected ) ->
                    result = table.LowerKeyNames(tbl)
                    expect( table.Equal(result, expected) ).to.beTrue()

                test( {}, {} )
                test( { "Hello": "World" }, { "hello": "World" } )
                test( { "Hello": "World", "Test": "This" }, { "hello": "World", "test": "This" } )
                test( { 1, 2, 3, 4, "TEST", "EVERY": "THING" }, { 1, 2, 3, 4, "TEST", "every": "THING" } )
                return

        *   name: "table.Flip(...) must work as original table.Flip"
            func: ->
                test = ( tbl, expected ) ->
                    result = table.Flip(tbl)
                    expect( table.Equal(result, expected) ).to.beTrue()

                test( {}, {} )
                test( { "hello": "world" }, { "world": "hello" } )
                test( { [true]: false }, { [false]: true } )
                test( { [3]: 1 }, { [1]: 3 } )
                test( { "never": "gonna", "give": "you", "up" }, { "gonna": "never", "you": "give", "up": 1 } )
                return
