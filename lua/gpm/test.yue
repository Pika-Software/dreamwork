import Promise, Error, debug from gpm
import async, await from Promise
import format from string
SysTime = SysTime

iter = 10000
warmup = math.min( iter / 100, 100 )
bench = (name, fn) ->
    -- Warmup
    for i = 1, warmup
        fn!

    collectgarbage "stop"
    st = SysTime!

    for i = 1, iter
        fn!

    st = SysTime! - st
    collectgarbage "restart"
    print format( "%d iterations of %s, took %f sec.", iter, name, st )
    return st

main = async ->
    -- gpm.Import( "dll://asyncio" )
    -- PrintTable gpm.Import( "file:/addons/NikNaks-main.zip")
    -- gpm.Import( "file:/lua/packages/b/init" )
    -- PrintTable gpm.Import( "file://addons/160250458.gma")
    -- gpm.Import( "github://Nak2/NikNaks/main/lua/includes/modules/niknaks.lua" )
    -- gpm.Import( "package:package_v2" )

    -- PrintTable gpm.Import "https://raw.githubusercontent.com/unknown-gd/unknown-ghosts/main/jb_mars_lp.json"

    -- specifier = "b"
    -- print "=== Loading `#{specifier}` #{CurTime()} ==="

    -- entry = await gpm.loader.Resolve specifier
    -- print "Entry is #{entry} (#{entry and debug.getfpath(entry) or "???"})"
    -- if entry
    --     print "return:", await entry!

    -- pkgs = await getPackages!
    -- for pkg in *pkgs
    --     gpm.Logger\Info "Loading package `#{pkg}`..."
    --     gpm.Import "lua://" .. pkg.dir .. pkg.entry

    -- return
    -- print "fetching info..."
    -- info = await gpm.FetchInfo "package_v2"
    -- print "info: #{info}"
    -- if istable info then PrintTable info
    -- pkg = Package "lua://packages/package_v2/"

    -- print "--- #{CurTime!} ---"
    -- print "Getting package info..."
    -- info = await pkg\GetInfo!

    -- print "Loading package `#{info.name}`..."
    -- result = await pkg\GetResult!
    -- print "Result is #{result}"
    -- print "#{pkg} has been loaded"
    -- print "--- #{CurTime!} ---"

main!\Catch (err)->
    try Error.display err
    catch err
        ErrorNoHaltWithStack err
        return
    return
