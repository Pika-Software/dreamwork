_G = _G
import gpm from _G
import environment, Logger from gpm
import concommand from environment

-- just in case :>
unless concommand
    return

import lower, StartsWith from environment.string
import concat, remove from environment.table
import pairs from environment
import Add from concommand

commands = {
    install: {
        help: "Install a package"
        call: ( args ) ->
        hint: ( args ) ->
    },
    uninstall: {
        help: "Remove a package"
        call: ( args ) ->
        hint: ( args ) ->
    },
    reload: {
        help: "Reload a package"
        call: ( args ) ->
        hint: ( args ) ->
    }
    run: {
        help: "Run arbitrary package scripts"
        call: ( args ) ->
        hint: ( args ) ->
    }
    update: {
        help: "Updates package list from repositories"
        call: ( args ) ->
            -- loader.GetVersions!

        hint: ( args ) ->
    },
    upgrade: {
        help: "WIP"
        call: ( args ) ->
        hint: ( args ) ->
    },
    purge: {
        help: "WIP"
        call: ( args ) ->
        hint: ( args ) ->
    },
    pull: {
        help: "WIP"
        call: ( args ) ->
        hint: ( args ) ->
    },
    list: {
        help: "Lists installed packages"
        call: ( args ) ->
            lines, count = {}, 0
            for name, versions in pairs( gpm.Packages )
                buffer, length = {}, 0
                for version in pairs( versions )
                    length += 1
                    buffer[ length ] = version\__tostring!

                count += 1
                lines[ count ] = count .. ". " .. name .. ": " .. concat( buffer, ", ", 1, length )

            count += 1
            lines[ count ] = "Total: " .. count

            Logger\Info( "Package list:\n" .. concat( lines, "\n", 1, count ) )
            return nil
    },
    info: {
        help: "Shows information about the package manager"
        call: ( args ) ->
        hint: ( args ) ->
    },
    search: {
        help: "Search for packages in repositories"
        call: ( args ) ->
        hint: ( args ) ->
    }
}

list = {}
for name in pairs( commands )
    list[] = "gpm " .. name

do

    helpList = {}

    commands.help = {
        help: "Shows this help"
        call: ( _, args ) ->
            cmd = args[ 1 ]
            if cmd
                cmd = lower( cmd )

                command = commands[ cmd ]
                if command
                    :help = command
                    if help
                        Logger\Info( "help (%s): %s.", cmd, help )
                        return nil
            else
                cmd = "none"

            Logger\Warn( "help (%s): No help found.", cmd )
            return nil
        hint: ( args ) ->
            str = args[ 1 ]
            unless str
                return helpList

            str = "gpm help " .. lower( str )

            suggestions, length = {}, 0
            for name in *helpList
                if StartsWith( name, str )
                    length += 1
                    suggestions[ length ] = name

            if length == 0
                return nil

            return suggestions
    }

    for name in pairs( commands )
        helpList[] = "gpm help " .. name

Add( "gpm", ( ply, _, args ) ->
        local command
        if #args ~= 0
            command = commands[ lower( remove( args, 1 ) ) ]

        if command
            command.call( ply, args )

        return nil,
    ( _, __, args ) ->
        str = args[ 1 ]
        unless str
            return list

        cmd = lower( remove( args, 1 ) )
        str = "gpm " .. cmd

        suggestions, length = {}, 0
        for name in *list
            if name == str
                suggestions = nil
                break

            elseif StartsWith( name, str )
                length += 1
                suggestions[ length ] = name

        if suggestions and length ~= 0
            return suggestions

        command = commands[ cmd ]
        if command
            func = command.hint
            if func
                return func( args )

        return nil,
"gLua Package Manager" )
