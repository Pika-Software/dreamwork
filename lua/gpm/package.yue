gpm = gpm
:fs, :path, :metaworks, :Logger, :Promise, :Table = gpm
luaGameDir = fs.LuaGameDir
istable = istable

packages = Table( gpm, "Packages" )

--[[
    Packages: {
        package_name: {
            1.0.0: Package Object1
            2.0.0: Package Object2
            1.1.0: Package Object3
        }
    }
]]

class Package
    new: ( url ) =>
        @url = url
        @name = "unknown"
        @version = "unknown"
        @dependencies = {}
        @environment = {}

    GetInfo: =>
        p = @info
        if p ~= nil
            return p
        p = @source\GetInfo( @ )
        @info = p
        return p

    Install: =>

gpm.Package = Package

sources = Table( gpm, "Sources" )
table.Empty( sources )

--[[

    file://path/to/file/in/game
    game://path/to/file/in/game
    data://path/to/file/in/data
    lua://path/to/file/in/lua

    Sources: {
        file: Source Obj1
        game: Source Obj1
        data: Source Obj1
        lua: Source Obj1
        http: Source Obj2
        https: Source Obj2
    }

]]

-- gpm.Install = ( url ) ->


Promise_Async = Promise.Async

files = fs.Find( "gpm/sources/*", luaGameDir )
processed, total = 0, #files

for index = 1, total
    filePath = "gpm/sources/" .. files[ index ]
    if string.GetExtensionFromFilename( filePath ) ~= "lua"
        continue

    fs.CompileLua( filePath, luaGameDir )\Then(
        ( func ) ->
            processed += 1

            environment = {}
            package.seeall( environment )

            if xpcall( setfenv( func, environment ), ErrorNoHaltWithStack )
                if SERVER
                    AddCSLuaFile( filePath )
                sources[] = environment

            if index == total
                files, folders = fs.Find( "packages/*", luaGameDir )
                for folderName in *folders
                    importPath = "packages/" .. folderName

                for fileName in *files
                    importPath = "packages/" .. fileName

        ( message ) ->
            processed += 1
            ErrorNoHaltWithStack( message )
    )