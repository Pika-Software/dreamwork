gpm = gpm
:Promise, :Error, :path, :string = gpm
:async, :await = Promise

class ModuleURLResolutionError extends Error
gpm.ModuleURLResolutionError = ModuleURLResolutionError

class InvalidModuleSpecifierError extends Error
gpm.InvalidModuleSpecifierError = InvalidModuleSpecifierError

class ModuleLoadError extends Error
gpm.ModuleLoadError = ModuleLoadError

class ModuleNotFoundError extends Error
gpm.ModuleNotFoundError = ModuleNotFoundError

-- https://nodejs.org/api/esm.html#resolution-algorithm-specification
-- Yeah, this loader tries to mimic ESM loader procedure

packageSelfResolve = (package_name, package_subpath, parent_url) -> nil

packageResolve = (specifier, parent_url) ->
    package_name = nil
    if specifier == ""
        error InvalidModuleSpecifierError specifier

    unless string.StartsWith specifier, "@"
        package_name = string.match specifier, "([^/]*)"
    else
        unless string.match specifier, "/" -- check if specifier even has /
            error InvalidModuleSpecifierError specifier
        package_name = string.match specifier, "(@[^/]*/[^/]*)"
    
    if string.StartsWith(package_name, ".") or string.match(package_name, "[\\%%]")
        error InvalidModuleSpecifierError specifier
    
    package_subpath = "." .. string.sub(specifier, #package_name + 1)
    if string.EndsWith package_subpath, "/"
        error InvalidModuleSpecifierError specifier
    
    if self_url = packageSelfResolve package_name, package_subpath, parent_url
        return self_url
    
    parent_url = gpm.URL parent_url
    while parent_url.path and parent_url.path != ""
        parent_url.path = string.sub string.GetPathFromFilename(parent_url.path), 1, -2
        package_url = path.Normalize path.Join parent_url.path, "packages", specifier
        if file.IsDir package_url, "LUA"
            pmeta = gpm.LoadMetadataFromDir package_url
            -- TODO If pjson is not null and pjson.exports is not null or undefined, then
            if package_subpath == "."
                if isstring pmeta.main
                    return "lua://" .. path.Join package_url, pmeta.main
            else
                return "lua://" .. path.Normalize path.Join package_url, package_subpath 

    error ModuleNotFoundError specifier

resolveURL = (specifier, parent_url) ->
    resolved = nil
    format = nil

    -- https://nodejs.org/api/esm.html#resolution-algorithm-specification
    -- should first check if url is a valid url
    if string.IsURL specifier
        resolved = specifier
    -- check if url is a relative path
    else if string.StartsWith(specifier, "./") or string.StartsWith(specifier, "../") or string.StartsWith(specifier, "/")
        filePath = specifier
        if parent_url
            parent_path = gpm.URL parent_url
            if parent_path = parent_path.protocol == "lua" and string.GetPathFromFilename parent_path.path
                filePath = path.Join parent_path, filePath
        
        resolved = "lua://" .. path.Normalize filePath
    -- it is a bare specifier, run package resolve
    else 
        resolved = packageResolve specifier, parent_url

    return resolved, format

setupEnv = (func) ->
    setfenv func, setmetatable {
        require: gpm.Import
        Promise: gpm.Promise
        await: gpm.Promise.await
        async: gpm.Promise.async
    }, { __index: _G, __newindex: _G }

--[[

    tasks = {}
    for package in packages
        tasks[] = asyncImport package, parent_url

    for task in tasks
        task\Catch (err) ->
            print err

    PKG.name
    PKG.metadata.name
    PKG.env == getfenv(1)
    PARENT_URL

    PKG == gpm.Package!

    PKG.Tasks = {
        metadata: Promise 1
        download: Primise 2
    }

    Packages = { }

    -- package://PackageA/module1 -> lua://packages/PackageA/module1/package.lua
    -- lua://niknaks/package.lua

    lua://my_package/init.lua   - single file package
    lua://my_package            - multi file package ( package.lua and other files )

    NewPackage = ( url ) ->
        -- example1: url = "package://PackageA"
        -- example1: url = "lua://my_package"
        url = resolveURL( url )

        -- example1: url = "lua://packages/PackageA"
        -- example2: url = "lua://my_package"

        package = Packages[ url ]
        unless package
            package = gpm.Package( url )
            Packages[ url ] = package

        return package

    Package A:
        Code:
            ents.MyFunc = ->
                print( "FUnc!" )

            print COLLISION_GROUP_CUSTOM

        Depends:
            Package B:
                Globals: 
                    markers = {}

    Package C:
        Code:
            print COLLISION_GROUP_CUSTOM
            ents.MyFunc!

        Depends:
            Package D:
                Globals: 
                    markers = {}
            
            Package B:

    Output:
            FUnc!
            1
            2

]]

asyncImport = async (specifier, parent_url) ->
    url, format = resolveURL specifier, parent_url
    url = gpm.URL url
    if url.protocol == "lua"
        entry_fn = CompileFile url.path
        unless entry_fn
            error ModuleLoadError "failed to compile file #{url.path}"

        entry_fn = async setupEnv entry_fn
        return entry_fn!
    elseif url.protocol == "http" or url.protocol == "https"
        ext = string.GetExtensionFromFilename url.path
        if ext == "lua"
            req = await gpm.http.Fetch tostring url
            unless req and req.code == 200 and req.body
                error ModuleLoadError "failed to fetch #{url}"
            
            entry_fn = CompileString req.body
            unless entry_fn
                error ModuleLoadError "failed to compile file #{url.path}"

            entry_fn = async setupEnv entry_fn
            return entry_fn!
        else
            error ModuleLoadError "unsupported https url: #{url}"
    else
        error ModuleURLResolutionError "cannot resolve url: #{url}"

getParentURL = ->
    -- get url from something like gpm.meta.url or PARENT_URL
    if current_dir = gpm.debug.getfpath!
        return "lua://" .. current_dir
    return "lua:///" -- default fallback

gpm.Import = (url, should_await = true) ->
    parent_url = getParentURL!
    result = asyncImport url, parent_url
    if should_await then return result\await!
    else return result
