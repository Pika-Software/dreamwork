_G = _G
import environment from _G.gpm
import string, file, table, await, async, AddonError, ArgAssert, isstring, error, tostring, tonumber from environment

file.CreateDir( "/data/gpm/mount", true )
file.Delete( "/data/gpm/mount/*" )
_module_0 = {}

do

    import Find, GetFolderContents from file
    import GetAddons from _G.engine

    _module_0.GetAll = GetAddons

    get = _module_0.Get = ( wsid ) ->
        for data in *GetAddons!
            if data.wsid == wsid
                return data

    _module_0.FileFind = ( filePath, wsid ) ->
        data = get( wsid )
        if data
            return Find( filePath, data.title, true )

    _module_0.GetFiles = ( wsid, filePath ) ->
        data = get( wsid )
        if data
            return GetFolderContents( filePath or "", data.title, true )

do

    import HasValue from table

    -- Addon types
    types = _module_0.Types = {
        "gamemode",
        "map",
        "weapon",
        "vehicle",
        "npc",
        "entity",
        "tool",
        "effects",
        "model",
        "servercontent"
    }

    _module_0.TypeExists = ( str ) ->
        return HasValue( types, str, true )

    -- Addon tags
    tags = _module_0.Tags = {
        "fun",
        "roleplay",
        "scenic",
        "movie",
        "realism",
        "cartoon",
        "water",
        "comic",
        "build"
    }

    _module_0.TagExists = ( str ) ->
        return HasValue( tags, str, true )

local isFilePathAllowed
do

    import find, gsub from string

    -- https://github.com/Facepunch/gmad/blob/master/include/AddonWhiteList.h
    wildcard = {
        "lua/*.lua",
        "scenes/*.vcd",
        "particles/*.pcf",
        "resource/fonts/*.ttf",
        "scripts/vehicles/*.txt",
        "resource/localization/*/*.properties",
        "maps/*.bsp",
        "maps/*.lmp",
        "maps/*.nav",
        "maps/*.ain",
        "maps/thumb/*.png",
        "sound/*.wav",
        "sound/*.mp3",
        "sound/*.ogg",
        "materials/*.vmt",
        "materials/*.vtf",
        "materials/*.png",
        "materials/*.jpg",
        "materials/*.jpeg",
        "materials/colorcorrection/*.raw",
        "models/*.mdl",
        "models/*.vtx",
        "models/*.phy",
        "models/*.ani",
        "models/*.vvd",
        "gamemodes/*/*.txt",
        "gamemodes/*/*.fgd",
        "gamemodes/*/logo.png",
        "gamemodes/*/icon24.png",
        "gamemodes/*/gamemode/*.lua",
        "gamemodes/*/entities/effects/*.lua",
        "gamemodes/*/entities/weapons/*.lua",
        "gamemodes/*/entities/entities/*.lua",
        "gamemodes/*/backgrounds/*.png",
        "gamemodes/*/backgrounds/*.jpg",
        "gamemodes/*/backgrounds/*.jpeg",
        "gamemodes/*/content/models/*.mdl",
        "gamemodes/*/content/models/*.vtx",
        "gamemodes/*/content/models/*.phy",
        "gamemodes/*/content/models/*.ani",
        "gamemodes/*/content/models/*.vvd",
        "gamemodes/*/content/materials/*.vmt",
        "gamemodes/*/content/materials/*.vtf",
        "gamemodes/*/content/materials/*.png",
        "gamemodes/*/content/materials/*.jpg",
        "gamemodes/*/content/materials/*.jpeg",
        "gamemodes/*/content/materials/colorcorrection/*.raw",
        "gamemodes/*/content/scenes/*.vcd",
        "gamemodes/*/content/particles/*.pcf",
        "gamemodes/*/content/resource/fonts/*.ttf",
        "gamemodes/*/content/scripts/vehicles/*.txt",
        "gamemodes/*/content/resource/localization/*/*.properties",
        "gamemodes/*/content/maps/*.bsp",
        "gamemodes/*/content/maps/*.nav",
        "gamemodes/*/content/maps/*.ain",
        "gamemodes/*/content/maps/thumb/*.png",
        "gamemodes/*/content/sound/*.wav",
        "gamemodes/*/content/sound/*.mp3",
        "gamemodes/*/content/sound/*.ogg",

        -- static version of the data/ folder
        -- (because you wouldn't be able to modify these)
        "data_static/*.txt",
        "data_static/*.dat",
        "data_static/*.json",
        "data_static/*.xml",
        "data_static/*.csv",
        "data_static/*.dem",
        "data_static/*.vcd",

        "data_static/*.vtf",
        "data_static/*.vmt",
        "data_static/*.png",
        "data_static/*.jpg",
        "data_static/*.jpeg",

        "data_static/*.mp3",
        "data_static/*.wav",
        "data_static/*.ogg"
    }

    -- Converting wildcard to lua patterns
    for index = 1, #wildcard
        wildcard[ index ] = "^" .. gsub( gsub( wildcard[ index ], "%.", "%." ), "%*", ".+" ) .. "$"

    isFilePathAllowed = _module_0.IsFilePathAllowed = ( filePath ) ->
        for pattern in *wildcard
            if find( filePath, pattern )
                return true

        return false

import AsyncRead, AsyncWrite, MountGMA, Open from file
import ByteStream, CRC, MD5 from environment.util
import byte, sub, lower, format, len from string
import equal from environment.path
import time from environment.os
import Empty from table

sidePrefix = _G.SERVER and "s" or _G.CLIENT and "c" or _G.MENU_DLL and "m" or "u"

_module_0.GMA = environment.class( "GMA", {
    Identity: "GMAD"
    FormatVersion: 3

    __tostring: =>
        return format( "GMAF %p [%s]", @, @title )

    new: ( binary, doCRC ) =>
        @title = "unknown"
        @author = "unknown"
        @description = "unknown"
        @version = 1
        @timestamp = 0
        @required_content = {}
        @steam_id = ""
        @real_crc = 0
        @files = {}
        @stored_crc = 0

        if binary
            @Parse( ByteStream( binary ), doCRC )

        return nil

    GetTitle: =>
        return @title

    SetTitle: ( str ) =>
        ArgAssert( str, 1, "string" )
        @title = str

    GetAuthor: =>
        return @author

    SetAuthor: ( str ) =>
        ArgAssert( str, 1, "string" )
        @author = str

    GetDescription: =>
        return @description

    SetDescription: ( str ) =>
        ArgAssert( str, 1, "string" )
        @description = str

    GetAddonVersion: =>
        return @version

    SetAddonVersion: ( int32 ) =>
        ArgAssert( int32, 1, "number" )
        @version = int32

    GetTimestamp: =>
        return @timestamp

    SetTimestamp: ( uint64 ) =>
        ArgAssert( uint64, 1, "number" )
        @timestamp = uint64

    GetSteamID: =>
        return @steam_id

    SetSteamID: ( str ) =>
        ArgAssert( str, 1, "string" )
        @steam_id = str

    Parse: ( handler, doCRC ) =>
        handler\Seek( 0 )

        if handler\Read( 4 ) ~= ( @Identity )
            error AddonError "File is not a gma"

        version = handler\ReadByte!
        if version > @FormatVersion
            error AddonError "gma version is unsupported"

        @steam_id = tostring( handler\ReadUInt64! ) or ""
        @timestamp = handler\ReadUInt64!

        if version > 1
            :required_content = @

            while not handler\EndOfFile!
                value = handler\ReadString!
                unless value
                    break

                required_content[ value ] = true

            handler\Skip( 1 )

        @title = handler\ReadString!
        @description = handler\ReadString!
        @author = handler\ReadString!

        @version = handler\ReadLong!

        position = 0
        :files = @

        while not handler\EndOfFile!
            index = handler\ReadULong!
            if index == 0
                break

            data = {
                path: handler\ReadString!
                :position
            }

            fileSize = handler\ReadUInt64!
            data.size = fileSize
            position += fileSize

            data.stored_crc = handler\ReadULong!
            files[ index ] = data

        files.pointer = handler\Tell!

        if doCRC ~= true
            contentSize = handler\Size! - 4
            handler\Seek( contentSize )

            @stored_crc = handler\ReadULong! or 0

            handler\Seek( 0 )
            @real_crc = tonumber( CRC( handler\Read( contentSize ) ) )

    VerifyCRC: =>
        return @stored_crc == @real_crc

    VerifyFilesCRC: =>
        for data in *@files
            :stored_crc = data
            unless stored_crc
                return false, data

            :real_crc = data
            unless real_crc
                content = data.content
                if content
                    real_crc = tonumber( CRC( content ) )
                    data.real_crc = real_crc

            if stored_crc ~= real_crc
                return false, data

        return true

    VerifyFiles: =>
        :files = @
        if #files == 0
            return false, nil

        for data in *files
            unless isFilePathAllowed( data.path )
                return false, data

        return true

    ReadFile: ( handler, index ) =>
        unless handler
            error AddonError "file read handler is missing, reading is not possible"

        :files = @

        data = files[ index ]
        unless data
            error AddonError "requested file does not exist"

        handler\Seek( files.pointer + data.position )
        data.content = handler\Read( data.size )
        return data

    ReadAllFiles: ( handler, doCRC ) =>
        unless handler
            error AddonError "file read handler is missing, reading is not possible"

        :files = @

        :pointer = files
        unless pointer
            error AddonError "file pointer is missing, reading is not possible"

        doCRC = doCRC ~= true

        for data in *files
            handler\Seek( pointer + data.position )
            content = data.content = handler\Read( data.size )
            if doCRC
                data.real_crc = tonumber( CRC( content ) )

        return files

    GetFiles: =>
        return @files

    GetFile: ( index ) =>
        return @files[ index ]

    SetFile: ( filePath, content, doCRC ) =>
        ArgAssert( filePath, 1, "string" )
        ArgAssert( content, 2, "string" )

        if byte( filePath, 1 ) == 0x2F --[[ / ]]
            filePath = sub( filePath, 2 )

        filePath = lower( filePath )
        doCRC = doCRC ~= false
        :files = @

        length = #files
        ::removed::

        for index = 1, length
            if equal( files[ index ].path, filePath )
                remove( files, index )
                length -= 1
                goto removed

        data = {
            size: len( content )
            path: filePath
            :content
        }

        if doCRC
            data.stored_crc = data.real_crc = tonumber( CRC( content ) )

        length += 1
        files[ length ] = data

    ClearFiles: =>
        return Empty( @files )

    AddRequiredContent: ( value ) =>
        ArgAssert( value, 1, "string" )
        @required_content[ value ] = true

    RemoveRequiredContent: ( value ) =>
        ArgAssert( value, 1, "string" )
        @required_content[ value ] = nil

    ClearRequiredContent: =>
        return Empty( @required_content )

    Read: ( filePath, readAllFiles, doCRC ) =>
        Empty( @required_content )
        Empty( @files )

        handler = Open( filePath, "rb" )
        unless handler
            error AddonError "file cannot be opened"

        @Parse( handler, doCRC )

        if readAllFiles
            @ReadAllFiles( handler, doCRC )

        handler\Close!
        return @

    AsyncRead: async ( filePath, readAllFiles, doCRC ) =>
        Empty( @required_content )
        Empty( @files )

        handler = ByteStream( await AsyncRead( filePath, "rb" ) )
        @Parse( handler, doCRC )

        if readAllFiles
            @ReadAllFiles( handler, doCRC )

        handler\Close!
        return @

    GetBinary: ( doCRC ) =>
        ok, result = @VerifyFiles!
        unless ok
            if result
                error AddonError "file is not allowed by whitelist (" .. result.path .. ")"
            else
                error AddonError "gma is empty"

        doCRC = doCRC ~= false

        handler = ByteStream!

        handler\Write( @Identity )
        handler\WriteByte( @FormatVersion )

        handler\WriteUInt64( tonumber( @steam_id ) or 0 )
        handler\WriteUInt64( @timestamp or time! )

        for value in pairs( @required_content )
            handler\WriteString( value )

        handler\WriteByte( 0 )

        handler\WriteString( @title )
        handler\WriteString( @description )
        handler\WriteString( @author )

        handler\WriteLong( @version )

        :files = @
        for index = 1, #files
            handler\WriteULong( index )
            data = files[ index ]

            handler\WriteString( lower( data.path ) )
            handler\WriteUInt64( data.size )

            if doCRC
                handler\WriteULong( tonumber( CRC( data.content ) ) )
            else
                handler\WriteULong( 0 )

        handler\WriteULong( 0 )

        for data in *files
            content = data.content
            if isstring( content )
                handler\Write( content )
            else
                error AddonError "file content must be a string (" .. data.path .. ")"

        if doCRC
            crc = tonumber( CRC( handler\ReadAll! ) )
            @stored_crc = crc
            @real_crc = crc
        else
            handler\WriteULong( 0 )

        return handler\ReadAll!

    Write: ( filePath, doCRC ) =>
        ArgAssert( filePath, 1, "string" )

        handler = Open( filePath, "wb" )
        unless handler
            error AddonError "file '" .. filePath .. "' cannot be opened"

        handler\Write( @GetBinary( doCRC ) )
        handler\Close!
        return @

    AsyncWrite: async ( filePath, doCRC ) =>
        ArgAssert( filePath, 1, "string" )
        await AsyncWrite( filePath, @GetBinary( doCRC ) )
        return @

    Mount: ( doCRC ) =>
        filePath = "/data/gpm/mount/" .. MD5( @title .. time! .. sidePrefix ) .. ".gma"
        @Write( filePath, doCRC )

        ok, result = MountGMA( filePath )
        unless ok
            error AddonError result

        return result

    AsyncMount: async ( doCRC ) =>
        filePath = "/data/gpm/mount/" .. MD5( @title .. time! .. sidePrefix ) .. ".gma"
        await @AsyncWrite( filePath, doCRC )

        ok, result = MountGMA( filePath )
        unless ok
            error AddonError result

        return result
} )

return _module_0
