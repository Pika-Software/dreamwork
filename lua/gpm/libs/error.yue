--[[
    MIT License

    Copyright (c) 2023-2024 Retro

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
]]
import environment from _G.gpm
import isstring, tostring, ErrorNoHaltWithStack, ErrorNoHalt, getmetatable from gpm.environment
import getstack from environment.debug
import format, rep from string
luaClass = environment.class
import concat from table

local errorClass
export iserror = ( obj, name = "Error" ) ->
    metatable = getmetatable( obj )
    cls = metatable and metatable.__class
    while cls
        if cls.__name == name
            return true

        cls = cls.__parent

    return false

errorClass = luaClass(
    "Error",
    {
        name: "Error"

        new: ( @message, @fileName, @lineNumber, stackPos ) =>
            @stack = stack = getstack( stackPos or 3 )

            if first := stack[1]
                @fileName or= first.short_src
                @lineNumber or= first.currentline

            return nil

        __tostring: =>
            if @fileName
                return format( "%s:%d: %s: %s", @fileName, @lineNumber or 0, @name, @message )

            return @name .. ": " .. @message

        display: =>
            if isstring( @ )
                return ErrorNoHaltWithStack( @ )

            lines, length = { "\n[ERROR] " .. tostring( @ ) }, 1

            stack = @stack
            for index = 1, #stack
                length += 1
                info = stack[ index ]
                lines[ length ] = format( "%s %d. %s - %s:%d", rep( " ", index ), index, info.name or "unknown", info.short_src, info.currentline )

            length += 1
            lines[ length ] = "\n"

            ErrorNoHalt concat( lines, "\n", 1, length )
            return nil
    },
    {
        __inherited: ( child ) =>
            child.__base.name = child.__name or @name

        captureStack: ( stackPos ) ->
            return getstack( stackPos or 1 )

        is: iserror
    }
)

export NotImplementedError = luaClass( "NotImplementedError", nil, nil, errorClass )
export CodeCompileError = luaClass( "CodeCompileError", nil, nil, errorClass )
export FileSystemError = luaClass( "FileSystemError", nil, nil, errorClass )
export WebClientError = luaClass( "WebClientError", nil, nil, errorClass )
export RuntimeError = luaClass( "RuntimeError", nil, nil, errorClass )
export PackageError = luaClass( "PackageError", nil, nil, errorClass )
export PromiseError = luaClass( "PromiseError", nil, nil, errorClass )
export ModuleError = luaClass( "ModuleError", nil, nil, errorClass )
export SourceError = luaClass( "SourceError", nil, nil, errorClass )
export AddonError = luaClass( "AddonError", nil, nil, errorClass )
export RangeError = luaClass( "RangeError", nil, nil, errorClass )
export TypeError = luaClass( "TypeError", nil, nil, errorClass )
export Error = errorClass
