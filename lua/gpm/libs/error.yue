--[[
    MIT License

    Copyright (c) 2023-2024 Retro

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
]]
import environment from _G.gpm
import isstring, tostring, ErrorNoHaltWithStack, ErrorNoHalt, getmetatable from gpm.environment
import getstack, getupvalue, getlocal, fempty from environment.debug
classExtend = environment.extend
import format, rep from string
import concat from table

local errorClass
export iserror = ( obj, name = "Error" ) ->
    metatable = getmetatable( obj )
    cls = metatable and metatable.__class
    while cls
        if cls.__name == name
            return true

        cls = cls.__parent

    return false

_callStack = { n: 0 }

captureStack = ( stackPos ) ->
    return getstack( stackPos or 1 )

pushCallStack = ( stack ) ->
    size = _callStack.n + 1
    _callStack[ size ] = stack
    _callStack.n = size

popCallStack = ->
    pos = _callStack.n
    if pos == 0
        return nil

    stack = _callStack[ pos ]
    _callStack[ pos ] = nil
    _callStack.n = pos - 1
    return stack

-- Should be used with captureStack
appendStack = ( stack ) ->
    previous = _callStack[ _callStack.n ]
    pushCallStack( { stack, previous } )

mergeStack = ( stack ) ->
    pos = #stack
    currentCallStack = _callStack[ _callStack.n ]
    while currentCallStack
        -- just copy over info fields
        for info in *currentCallStack[ 1 ]
            pos += 1
            stack[ pos ] = info

        -- get next call stack
        currentCallStack = currentCallStack[ 2 ]

    return stack

dumpFile = fempty
do
    import math, file, MsgC, Msg from environment
    import Split, find, sub from environment.string

    gray = Color( 180, 180, 180 )
    white = Color( 225, 225, 225 )
    danger = Color( 239, 68, 68 )

    dumpFile = (message, fileName, line) ->
        unless fileName and line
            return
        
        data = file.Read( fileName, "GAME" )
        unless data and #data > 0
            return
        
        lines = Split( data, "\n" )
        unless lines and lines[ line ]
            return
        
        start = math.max( 1, line - 5 )
        finish = math.min( #lines, line + 3 )
        numWidth = math.floor( math.log10( finish ) ) + 1

        longestLine = 0
        firstChar = math.huge
        for i = start, finish
            code = lines[ i ]

            pos = find( code, "%S" )
            if pos and pos < firstChar
                firstChar = pos
            
            longestLine = math.max( longestLine, #code )
        
        longestLine = math.min( longestLine - firstChar, 120 )
        
        MsgC( gray, rep(" ", numWidth + 3), rep("_", longestLine + 4), "\n", rep(" ", numWidth + 2), "|\n" )

        numFormat = " %0" .. numWidth .. "d | "
        for i = start, finish
            code = lines[ i ]
            MsgC( i == line and white or gray , format(numFormat, i), sub(code, firstChar, longestLine + firstChar), "\n" )

            if i == line
                space = (find( code, "%S" ) or 1 ) - 1
                MsgC( gray, rep( " ", numWidth + 2 ), "| ", sub( code, firstChar, space ), danger, "^ ", tostring( message ), "\n" )
                MsgC( gray, rep( " ", numWidth + 2 ), "|\n" )

        MsgC( gray, rep(" ", numWidth + 2), "|\n", rep(" ", numWidth + 3), rep("Â¯", longestLine + 4), "\n\n" )

errorClass = environment.class(
    "Error",
    {
        name: "Error"

        new: ( @message, @fileName, @lineNumber, stackPos = 3 ) =>
            @stack = stack = captureStack( stackPos )
            mergeStack( stack )

            if first := stack[ 1 ]
                @fileName or= first.short_src
                @lineNumber or= first.currentline

                -- TODO: prevent recording these values on client in production
                if getupvalue and first.func and first.nups and first.nups > 0
                    upvalues = @upvalues = {}
                    for i = 1, first.nups
                        name, value = getupvalue( first.func, i )
                        if name == nil
                            @upvalues = nil
                            break

                        upvalues[i] = { :name, :value }

                if getlocal
                    locals = @locals = {}
                    i = 1
                    while true
                        name, value = getlocal( stackPos, i )
                        if name == nil
                            break

                        if name != "(*temporary)"
                            locals[] = { :name, :value }
                        
                        i += 1
                
                    if #locals == 0
                        @locals = nil

            return nil

        __tostring: =>
            if @fileName
                return format( "%s:%d: %s: %s", @fileName, @lineNumber or 0, @name, @message )

            return @name .. ": " .. @message

        display: =>
            if isstring( @ )
                return ErrorNoHaltWithStack( @ )

            lines = { "\n[ERROR] " .. tostring( @ ) }

            -- Add stack trace
            stack = @stack
            for i = 1, #stack
                info = stack[ i ]
                lines[] = format( "%s %d. %s - %s:%d", rep( " ", i ), i, info.name or "unknown", info.short_src, info.currentline or -1 )
            
            -- Add locals
            if locals := @locals
                lines[] = "\n=== Locals ==="

                for entry in *locals
                    lines[] = format( "  - %s = %s", entry.name, entry.value )

            -- Add upvalues
            if upvalues := @upvalues
                lines[] = "\n=== Upvalues ==="

                for entry in *upvalues
                    lines[] = format( "  - %s = %s", entry.name, entry.value )

            lines[] = "\n"

            ErrorNoHalt concat( lines, "\n" )

            -- TODO: disable this in client-side production environment
            dumpFile( @name .. ": " .. @message, @fileName, @lineNumber )
            return nil
    },
    {
        __inherited: ( child ) =>
            child.__base.name = child.__name or @name

        _callStack: _callStack
        captureStack: captureStack
        pushCallStack: pushCallStack
        popCallStack: popCallStack
        appendStack: appendStack
        mergeStack: mergeStack

        is: iserror
    }
)

export NotImplementedError = classExtend( errorClass, "NotImplementedError" )
export FutureCancelError = classExtend( errorClass, "FutureCancelError" )
export InvalidStateError = classExtend( errorClass, "InvalidStateError" )
export CodeCompileError = classExtend( errorClass, "CodeCompileError" )
export FileSystemError = classExtend( errorClass, "FileSystemError" )
export WebClientError = classExtend( errorClass, "WebClientError" )
export RuntimeError = classExtend( errorClass, "RuntimeError" )
export PackageError = classExtend( errorClass, "PackageError" )
export PromiseError = classExtend( errorClass, "PromiseError" )
export ModuleError = classExtend( errorClass, "ModuleError" )
export SourceError = classExtend( errorClass, "SourceError" )
export FutureError = classExtend( errorClass, "FutureError" )
export AddonError = classExtend( errorClass, "AddonError" )
export RangeError = classExtend( errorClass, "RangeError" )
export TypeError = classExtend( errorClass, "TypeError" )
export SQLError = classExtend( errorClass, "SQLError" )
export Error = errorClass
