import gpm, pairs, tostring from _G
import environment from gpm

import await, async, file, FileSystemError from environment

import time from environment.os
import equal from environment.path
import fempty from environment.debug
import match, sub from environment.string
import DecompressDeflate from environment.deflate
import ByteStream, MD5, CRC from environment.util
import Addon, IsFilePathAllowed from environment.addon
import AsyncRead, AsyncWrite, MountGMA, NormalizeGamePath from file

iterateZipFiles = file.IterateZipFiles = ( fileHandle, doCRC ) ->
    unless fileHandle
        return fempty

    return ->
        if fileHandle\Read( 4 ) ~= "PK\x03\x04"
            return

        fileHandle\Skip( 4 )

        compressionMethod = fileHandle\ReadUShort!
        fileHandle\Skip( 4 )

        crc = fileHandle\ReadULong!
        compressedSize = fileHandle\ReadULong!
        fileHandle\Skip( 4 )

        fileNameLen = fileHandle\ReadUShort!
        extraLen = fileHandle\ReadUShort!
        fileName = fileHandle\Read( fileNameLen )
        fileHandle\Skip( extraLen )

        local data
        switch compressionMethod
            -- Without compression
            when 0
                data = fileHandle\Read( compressedSize )

            -- Deflate compression
            when 8
                compressedData = fileHandle\Read( compressedSize )
                data = DecompressDeflate( compressedData )

        if data ~= nil and doCRC ~= false and tostring( crc ) ~= CRC( data )
            data = nil

        return fileName, data

file.Delete( "gpm/mount" )
file.CreateDir( "gpm/mount", true )

mountZIPData = file.MountZIPData = async ( data, uniqueName ) ->
    gma = Addon!

    local isInFolder, last
    temp = {}

    for fileName, content in iterateZipFiles( ByteStream( data ) )
        temp[ fileName ] = content

        if isInFolder ~= false
            current = match( fileName, "^(.-)/" )
            if last
                isInFolder = equal( last, current )

            last = current

    files = temp
    if isInFolder
        files = {}
        endPos = #last + 2
        for fileName, content in pairs( temp )
            files[ sub( fileName, endPos ) ] = content

    for fileName, content in pairs( files )
        if IsFilePathAllowed( fileName )
            gma\AddFile( fileName, content )

    bs = ByteStream!
    gma\SetTitle( MD5( uniqueName .. time! ) )
    gma\Write( bs, nil, false )

    filePath = "gpm/mount/" .. gma\GetTitle! .. ".gma"
    await AsyncWrite( filePath, bs.Data, "DATA", true )

    ok, result = MountGMA( "/data/" .. filePath )
    unless ok
        error FileSystemError result

    return result

asyncMount = async ( filePath, gamePath ) ->
    return await mountZIPData( await( AsyncRead( filePath, gamePath, true ) ), "file:///" .. filePath )

file.MountZIP = ( filePath, gamePath, skipNormalize ) ->
    unless skipNormalize
        filePath, gamePath = NormalizeGamePath( filePath, gamePath )

    return asyncMount( filePath, gamePath )
