_G = _G
import environment from _G.gpm
-- Based on https://github.com/luvit/luvit/blob/master/deps/path/base.lua
import byte, sub, len, lower, match, gsub, ByteSplit, TrimByte from environment.string
import getfmain, getfpathi from environment.debug
import concat, insert, remove from table
import getfenv, rawget from _G

export getFile = ( path ) ->
    for index = len( path ), 1, -1
		ch = byte( path, index )
		if ch == 0x2F --[[ / ]] or ch == 0x5C --[[ \ ]]
            return sub( path, index + 1 )

    return ""

export getFileName = ( path ) ->
    local dotPosition
    for index = len( path ), 1, -1
		ch = byte( path, index )
        if ch == 0x2E --[[ . ]]
            unless dotPosition
                dotPosition = index
        elseif ch == 0x2F --[[ / ]] or ch == 0x5C --[[ \ ]]
            if dotPosition
                return sub( path, index + 1, dotPosition - 1 )

            return sub( path, index + 1 )

    return ""

export getDirectory = ( path ) ->
    for index = len( path ), 1, -1
        ch = byte( path, index )
        if ch == 0x2F --[[ / ]] or ch == 0x5C --[[ \ ]]
            return sub( path, 1, index )

    return ""

export getFilePath = ( path ) ->
    for index = len( path ), 1, -1
        ch = byte( path, index )
        if ch == 0x2F --[[ / ]] or ch == 0x5C --[[ \ ]]
            return sub( path, 1, index )

    return ""

export getExtension = ( path ) ->
    for index = len( path ), 1, -1
		ch = byte( path, index )
		if ch == 0x2F --[[ / ]] or ch == 0x5C --[[ \ ]]
            break

		if ch == 0x2E --[[ . ]]
            return sub( path, index + 1 )

    return ""

export stripFile = ( path ) ->
    for index = len( path ), 1, -1
        ch = byte( path, index )
        if ch == 0x2F --[[ / ]] or ch == 0x5C --[[ \ ]]
            return sub( path, 1, index ), sub( path, index + 1 )

    return "", path

export stripDir = ( path ) ->
    for index = len( path ), 1, -1
        ch = byte( path, index )
        if ch == 0x2F --[[ / ]] or ch == 0x5C --[[ \ ]]
            return sub( path, index + 1 ), sub( path, 1, index )

    return path, ""

export stripExtension = ( path ) ->
    for index = len( path ), 1, -1
		ch = byte( path, index )
		if ch == 0x2F --[[ / ]] or ch == 0x5C --[[ \ ]]
            return path, ""

        if ch == 0x2E --[[ . ]]
            return sub( path, 1, index - 1 ), sub( path, index + 1 )

    return path, ""

export replaceFile = ( path, newFile ) ->
    return stripFile( path ) .. newFile

export replaceDir = ( path, newDir ) ->
    if byte( newDir, len( newDir ) ) ~= 0x2F --[[ / ]]
        newDir ..= "/"

    return newDir .. stripDir( path )

export replaceExtension = ( path, newExtension ) ->
    return stripExtension( path ) .. "." .. newExtension

export fixFileName = ( path ) ->
    length = len( path )

    if byte( path, length ) == 0x2F --[[ / ]]
        path = sub( path, 1, length - 1 )

    return path

export fixSlashes = ( path ) ->
    return gsub( path, "[/\\]+", "/" ), nil

export fix = ( path ) ->
    return fixFileName( fixSlashes( path ) )

export getCurrentFile = ->
    if func := getfmain!
        if fenv := getfenv( func )
            if mdl := rawget( fenv, "__module" )
                return rawget( mdl, "__filename" )

        return getfpathi( func )

    return "/"

export getCurrentDirectory = ->
    if func := getfmain!
        if fenv := getfenv( func )
            if mdl := rawget( fenv, "__module" )
                return rawget( mdl, "__dirname" )

        return getDirectory( getfpathi( func ) )

    return "/"

export delimiter = ":"
export sep = "/"

export isAbsolute = ( path ) ->
    return byte( path, 1 ) == 0x2F --[[ / ]]

import os from jit
export isSpecial = os == "Windows" or os == "OSX"

export equal = ( a, b ) ->
    if isSpecial
        return a and b and lower( a ) == lower( b )

    return a == b

-- Split a filename into [root, dir, basename]
export splitPath = ( path ) ->
    local root
    if isAbsolute( path )
        path = sub( path, 2 )
        root = "/"
    else
        root = ""

    basename, dir = stripDir( path )
    return root, dir, basename

export dirname = ( path ) ->
    path = getDirectory( path )
    if path == ""
        return "."

    return path

export basename = ( path, stripSuffix ) ->
    path = getFile( path )
    if stripSuffix
        return stripExtension( path )

    return path, ""

export extname = getExtension

export normalize = ( path ) ->
    isAbs = isAbsolute( path )
    trailingSlashes = byte( path, len( path ) ) == 0x2F --[[ / ]]

    if isAbs
        path = sub( path, 2 )

    parts, length = ByteSplit( path, 0x2F --[[ / ]] )

    -- Modifies an array of path parts in place by interpreting "." and ".." segments
    skip = 0

    for index = length, 1, -1
        part = parts[ index ]
        if part == "."
            remove( parts, index )
            length -= 1

        elseif part == ".."
            remove( parts, index )
            length -= 1
            skip += 1

        elseif skip > 0
            remove( parts, index )
            length -= 1
            skip -= 1

    unless isAbs
        while skip > 0
            insert( parts, 1, ".." )
            length += 1
            skip -= 1

    path = concat( parts, "/", 1, length )

    if path == ""
        if isAbs
            return "/"

        return "."

    if trailingSlashes
        path ..= "/"

    if isAbs
        path = "/" .. path

    return fixSlashes( path )

export join = ( ... ) ->
    parts, length = {}, 0

    -- filter out empty parts
    for part in *{...}
        if part and part ~= ""
            length += 1
            parts[ length ] = part

    for index = 1, length
        part = parts[ index ]

        -- Strip leading slashes on all but first item
        if index > 1
            part = TrimByte( part, 0x2F --[[ / ]], 1 )

        -- Strip trailing slashes on all but last item
        if index < length
            part = TrimByte( part, 0x2F --[[ / ]], -1 )

        parts[ index ] = part

    return normalize( concat( parts, "/", 1, length ) )

-- Works backwards, joining the arguments until it resolves to an absolute path.
-- If an absolute path is not resolved, then the current working directory is
-- prepended
export resolve = ( ... ) ->
    resolvedPath = ""
    isAbs = false
    paths = {...}

    for index = #paths, 1, -1
        path = paths[ index ]
        if path and path ~= ""
            resolvedPath = join( normalize( path ), resolvedPath )
            if isAbsolute( resolvedPath )
                isAbs = true
                break

    unless isAbs
        resolvedPath = join( getCurrentDirectory!, resolvedPath )

    return fixFileName( resolvedPath )

-- Returns the relative path from "from" to "to"
-- If no relative path can be solved, then "to" is returned
export relative = ( pathFrom, pathTo ) ->
    pathFrom = resolve( pathFrom )
    pathTo = resolve( pathTo )

    fromRoot, fromDir, fromBaseName = splitPath( pathFrom )
    toRoot, toDir, toBaseName = splitPath( pathTo )

    unless equal( fromRoot, toRoot )
        return pathTo

    fromParts, fromLength = ByteSplit( fromDir .. fromBaseName, 0x2F --[[ / ]] )
    toParts, toLength = ByteSplit( toDir .. toBaseName, 0x2F --[[ / ]] )

    commonLength = 0
    for index = 1, fromLength
        part = fromParts[ index ]
        unless equal( part, toParts[ index ] )
            break

        commonLength += 1

    parts, length = {}, 0
    for _ = commonLength + 1, fromLength
        length += 1
        parts[ length ] = ".."

    for index = commonLength + 1, toLength
        length += 1
        parts[ length ] = toParts[ index ]

    return concat( parts, "/", 1, length )

--[[
    ┌─────────────────────┬────────────┐
    │          dir        │    base    │
    ├──────┬              ├──────┬─────┤
    │ root │              │ name │ ext │
    "  /    home/user/dir/  file  .txt "
    └──────┴──────────────┴──────┴─────┘
    (All spaces in the "" line should be ignored. They are purely for formatting.)

]]
export parse = ( path ) ->
    root, dir, base = splitPath( path )

    name, ext = match( base, "^(.+)%.(.+)$" )
    if name
        ext = ext or ""
    else
        name = base
        ext = ""

    return { :root, :dir, :base, :ext, :name }
