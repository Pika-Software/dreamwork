_G = _G
import gpm, SysTime from _G
import environment, Logger from gpm
import await, async, ArgAssert, Promise, http, isstring, isnumber, istable, WebClientError from environment

unless isstring( http.UserAgent )
    http.UserAgent = "GLua Package Manager/" .. gpm.VERSION .. " - Garry's Mod/" .. VERSIONSTR

client, clientName, returnsState, userAgentKey = _G.HTTP, "Garry's Mod", true, nil
do

    clients = {
        {
            Name: "reqwest"
            Client: "reqwest"
            Available: SERVER
            ReturnsState: false
            UserAgentKey: "User-Agent"
        },
        {
            Name: "chttp"
            Client: "CHTTP"
            Available: CLIENT or SERVER
            ReturnsState: false
        }
    }

    for item in *clients
        if item.Available and ( util.IsBinaryModuleInstalled( item.Name ) and pcall( require, item.Name ) )
            client, clientName, returnsState, userAgentKey = _G[ item.Client ], item.Name, item.ReturnsState, item.UserAgentKey
            break

    Logger\Info( "'%s' was connected as HTTP client.", clientName )

local HTTP
do

    defaultTimeout, cacheLifetime = 10, 30 * 60

    do

        import CreateConVar from _G

        flags = _G.bit.bor( _G.FCVAR_ARCHIVE, _G.FCVAR_REPLICATED )

        defaultTimeout = CreateConVar( "http_timeout", "10", flags, "Default http timeout for gpm http library.", 3, 300 )\GetInt!
        cacheLifetime = CreateConVar( "gpm_http_cache_lifetime", "30", flags, "Cache lifetime for gpm http library." )\GetInt! * 60

    do

        import AddChangeCallback from _G.cvars

        AddChangeCallback( "http_timeout", ( _, __, new ) ->
            defaultTimeout = tonumber( new )
        "GLua Package Manager::HTTP" )

        AddChangeCallback( "gpm_http_cache_lifetime", ( _, __, new ) ->
            cacheLifetime = tonumber( new ) * 60
        "GLua Package Manager::HTTP" )

    requestCache = {}

    do

        import pairs from _G

        methods = http.Methods = { "GET", "POST", "HEAD", "PUT", "DELETE", "PATCH", "OPTIONS" }
        length = #methods
        methods.n = length

        for index = 1, length
            requestCache[ methods[ index ] ] = {}

        timer.Create "GLua Package Manager::HTTP", 60, 0, ->
            time = SysTime!

            for method in *methods
                cache = requestCache[ method ]
                for href, data in pairs( cache )
                    if ( time - data[ 2 ] ) > cacheLifetime
                        cache[ href ] = nil

    request = ( parameters ) =>
        if client( parameters ) or not returnsState
            Logger\Debug( "%s HTTP request to '%s', using '%s', with timeout %d seconds.", parameters.method, parameters.url, clientName, parameters.timeout )
        else
            if parameters.cache
                requestCache[ parameters.method ][ parameters.url ] = nil

            @Reject( WebClientError "failed to make http request" )

    queue = {}
    timer.Simple 0, ->
        for func in *queue
            func!

        queue = nil

    HTTP = ( parameters ) ->
        ArgAssert( parameters, 1, "table" )
        promise = Promise!

        unless isstring( parameters.method )
            parameters.method = "GET"

        unless isnumber( parameters.timeout )
            parameters.timeout = defaultTimeout

        if userAgentKey
            unless istable( parameters.headers )
                parameters.headers = {}

            parameters.headers[ userAgentKey ] = http.UserAgent

        :cache, :method, :url = parameters
        if cache
            unless requestCache[ method ]
                requestCache[ method ] = {}

            data = requestCache[ method ][ url ]
            if data
                return data[1] -- yeah, here we can just remove previous promise

            requestCache[ method ][ url ] = { promise, SysTime! }

        parameters.success = ( status, body, headers ) ->
            promise\Resolve( { :status, :body, :headers } )
            return nil

        parameters.failed = ( msg ) ->
            if cache
                requestCache[ method ][ url ] = nil

            promise\Reject( WebClientError msg )
            return nil

        if queue
            queue[] = ->
                request( promise, parameters )
        else
            request( promise, parameters )

        return promise

    environment.HTTP = HTTP

-- https://github.com/luvit/luvit/blob/master/deps/http-codec.lua
-- https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
-- https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
statusCodes = http.StatusCodes = setmetatable(
    {
        [ 100 ]: "Continue"
        [ 101 ]: "Switching Protocols"
        [ 102 ]: "Processing"               -- RFC 2518, obsoleted by RFC 4918
        [ 200 ]: "OK"
        [ 201 ]: "Created"
        [ 202 ]: "Accepted"
        [ 203 ]: "Non-Authoritative Information"
        [ 204 ]: "No Content"
        [ 205 ]: "Reset Content"
        [ 206 ]: "Partial Content"
        [ 207 ]: "Multi-Status"               -- RFC 4918
        [ 208 ]: "Already Reported",
        [ 300 ]: "Multiple Choices"
        [ 301 ]: "Moved Permanently"
        [ 302 ]: "Moved Temporarily"
        [ 303 ]: "See Other"
        [ 304 ]: "Not Modified"
        [ 305 ]: "Use Proxy"
        [ 307 ]: "Temporary Redirect"
        [ 400 ]: "Bad Request"
        [ 401 ]: "Unauthorized"
        [ 402 ]: "Payment Required"
        [ 403 ]: "Forbidden"
        [ 404 ]: "Not Found"
        [ 405 ]: "Method Not Allowed"
        [ 406 ]: "Not Acceptable"
        [ 407 ]: "Proxy Authentication Required"
        [ 408 ]: "Request Time-out"
        [ 409 ]: "Conflict"
        [ 410 ]: "Gone"
        [ 411 ]: "Length Required"
        [ 412 ]: "Precondition Failed"
        [ 413 ]: "Request Entity Too Large"
        [ 414 ]: "Request-URI Too Large"
        [ 415 ]: "Unsupported Media Type"
        [ 416 ]: "Requested Range Not Satisfiable"
        [ 417 ]: "Expectation Failed"
        [ 418 ]: "I'm a teapot"                       -- RFC 2324
        [ 422 ]: "Unprocessable Entity"               -- RFC 4918
        [ 423 ]: "Locked"                             -- RFC 4918
        [ 424 ]: "Failed Dependency"                  -- RFC 4918
        [ 425 ]: "Unordered Collection"               -- RFC 4918
        [ 426 ]: "Upgrade Required"                   -- RFC 2817
        [ 428 ]: "Precondition Required"              -- RFC 6585
        [ 429 ]: "Too Many Requests"                  -- RFC 6585
        [ 431 ]: "Request Header Fields Too Large"    -- RFC 6585
        [ 500 ]: "Internal Server Error"
        [ 501 ]: "Not Implemented"
        [ 502 ]: "Bad Gateway"
        [ 503 ]: "Service Unavailable"
        [ 504 ]: "Gateway Time-out"
        [ 505 ]: "HTTP Version not supported"
        [ 506 ]: "Variant Also Negotiates"            -- RFC 2295
        [ 507 ]: "Insufficient Storage"               -- RFC 4918
        [ 508 ]: "Loop Detected",
        [ 509 ]: "Bandwidth Limit Exceeded"
        [ 510 ]: "Not Extended"                       -- RFC 2774
        [ 511 ]: "Network Authentication Required"     -- RFC 6585
    },
    {
        __index: ->
            return "Unknown"
    }
)

do

    import concat, LowerKeyNames, Flip from environment.table
    import stripFile, stripExtension from environment.path
    import MountZIPData from environment.file
    import ByteSplit from environment.string
    import File from environment.addon
    import error, URL from environment

    http.Fetch = ( url, headers, timeout ) ->
        return HTTP( { :url, method: "GET", :headers, :timeout } )

    http.Post = ( url, parameters, headers, timeout ) ->
        return HTTP( { :url, method: "POST", :headers, :timeout, :parameters } )

    cachedFetch = http.CachedFetch = ( url, headers, timeout ) ->
        return HTTP( { :url, method: "GET", :headers, :timeout, cache: true } )

    http.CachedPost = ( url, parameters, headers, timeout ) ->
        return HTTP( { :url, method: "POST", :headers, :timeout, :parameters, cache: true } )

    http.FileInfo = async ( href, headers, timeout ) ->
        directoryPath, fileName = stripFile( URL( href ).pathname )

        result = await HTTP( { url: href, method: "HEAD", :headers, :timeout } )

        if result.status ~= 200
            error WebClientError "request failed " .. href .. " ( " .. statusCodes[ result.status ] .. " [" .. result.status .. "] )"
            return nil

        headers = LowerKeyNames( result.headers )

        return {
            size: headers["content-length"],
            type: headers["content-type"],
            directory: directoryPath,
            file: fileName
        }

    materialExtensions = {
        ["vtf"]: true,
        ["vmt"]: true,
        ["png"]: true,
        ["jpg"]: true,
        ["jpeg"]: true
    }

    soundExtensions = {
        ["mp3"]: true,
        ["wav"]: true,
        ["ogg"]: true
    }

    otherExtensions = {
        ["txt"]: true,
        ["dat"]: true,
        ["json"]: true,
        ["xml"]: true,
        ["csv"]: true,
        ["dem"]: true,
        ["vcd"]: true,
    }

    http.Download = async ( url, headers, timeout ) ->
        if isstring( url )
            url = URL( url )

        result = await cachedFetch( url.href, headers, timeout )

        if result.status ~= 200
            error WebClientError "request failed " .. url.href .. " (" .. statusCodes[ result.status ] .. " [" .. result.status .. "] )"
            return nil

        filePath, extension = stripExtension( url.pathname )

        if extension == "gma"
            f = File( result.body, true )
            unless f\VerifyCRC!
                error WebClientError "Invalid CRC checksum for '" .. url.href .. "'"

            f\SetTitle( url.href )
            return f\AsyncMount( false )

        if extension == "zip"
            return MountZIPData( result.body, url.href )

        filePath = concat( Flip( ByteSplit( url.hostname, 0x2E --[[ . ]] ) ), "/" ) .. filePath .. "."

        if extension == "lua"
            filePath = "lua/gpm/downloads/" .. filePath .. extension

        elseif soundExtensions[ extension ]
            filePath = "sound/gpm/downloads/" .. filePath .. extension

        elseif materialExtensions[ extension ]
            filePath = "materials/gpm/downloads/" .. filePath .. extension

        elseif otherExtensions[ extension ]
            filePath = "data_static/gpm/downloads/" .. filePath .. extension

        else
            filePath = "data_static/gpm/downloads/" .. filePath .. extension .. ".dat"

        f = File!
        f\SetTitle( url.href )
        f\AddFile( filePath, result.body, false )
        await f\AsyncMount( false )
        return filePath
