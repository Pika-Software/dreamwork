_G = _G
import math, tonumber from _G
import abs, atan2, ceil, min, max, random, sqrt, pow, floor, log, pi from math
import rep, format from _G.string
import concat from _G.table

-- Constants
export e = math.exp( 1 )
export ln10 = log( 10 )
export ln2 = log( 2 )
export log10e = log( e, 10 )
export log2e = log( e, 2 )
export sqrt1_2 = sqrt( 0.5 )
export sqrt2 = sqrt( 2 )

export maxinteger = 0x7FFFFFFF
export mininteger = -0x80000000

export pow2 = setmetatable( {
    [  0 ]: 1.0
    [  1 ]: 2.0
    [  2 ]: 4.0
    [  3 ]: 8.0
    [  4 ]: 16.0
    [  5 ]: 32.0
    [  6 ]: 64.0
    [  7 ]: 128.0
    [  8 ]: 256.0
    [  9 ]: 512.0
    [ 10 ]: 1024.0
}, {
    __index: ( n ) =>
        v = pow( 2.0, n )
        rawset( @, n, v )
        return v
} )

export mod2 = setmetatable( {
    [  0 ]: 0
    [  1 ]: 1
    [  2 ]: 0
    [  3 ]: 1
    [  4 ]: 0
    [  5 ]: 1
    [  6 ]: 0
    [  7 ]: 1
    [  8 ]: 0
    [  9 ]: 1
    [ 10 ]: 0
}, {
    __index: ( n ) =>
        v = n % 2
        rawset( @, n, v )
        return v
} )

-- https://github.com/ToxicFrog/vstruct/blob/master/frexp.lua
export frexp = math.frexp or ( x ) ->
    if x == 0
        return 0.0, 0.0

    e = floor( log( abs( x ) ) / ln2 )
    if e > 0
        x = x * pow2[ -e ]
    else
        x = x / pow2[ e ]

    -- Normalize to the range [0.5,1)
    if abs( x ) >= 1.0
        x, e = x / 2, e + 1

    return x, e

-- is checks
export isuint = ( n ) -> n >= 0 and ( n % 1 ) == 0
export isfloat = ( n ) -> ( n % 1 ) ~= 0
export isint = ( n ) -> ( n % 1 ) == 0

export isequalwith = ( a, b, tolerance ) -> abs( a - b ) <= tolerance
export isdivideable = ( n, d ) -> ( n % d ) == 0

export isbool = ( n ) -> n == 0 or n == 1
export iseven = ( n ) -> mod2[ n ] == 0
export isodd = ( n ) -> mod2[ n ] == 1

export inf = 1 / 0
export isinf = ( n ) -> n == inf

export nan = 0 / 0
export isnan = ( n ) -> n == nan

export isfinite = ( n ) -> not ( isinf( n ) or isnan( n ) )
export ispositive = ( n ) -> n > 0 or 1 / n == inf
export isnegative = ( n ) -> n < 0 or 1 / n == -inf

-- Sign
export sign = ( n ) -> ispositive( n ) and 1 or -1

-- Rounding
export round = ( n, d ) ->
    if d
        l = pow( 10, d )
        return floor( n * l + 0.5 ) / l

    return floor( n + 0.5 )

export nearest = ( n, d ) -> round( n / d ) * d

export trunc = ( n, d ) ->
    if d
        l = pow( 10, d )
        return ( n < 0 and ceil or floor )( n * l ) / l

    return ( n < 0 and ceil or floor )( n )

-- Logarithms
export log1p = ( n ) -> log( n + 1 )
export log2 = ( n ) -> log( n ) / ln2

-- Other
export rand = ( a, b ) -> a + ( b - a ) * random()
export fdiv = ( a, b ) -> floor( a / b )
export hypot = ( ... ) ->
    s = 0
    for n in *{ ... }
        s += pow( n, 2 )

    return sqrt( s )

export cbrt = ( n ) -> pow( n, 1 / 3 )
export root = ( n, d ) -> pow( n, 1 / d )
export timef = ( c, s, f ) -> ( c - s ) / ( f - s )
export approach = ( a, b, d ) ->
    c = b - a
    return a + sign( c ) * min( abs( c ), d )

-- Binary/Decimal/Hexadecimal
export binary2decimal = ( s ) -> tonumber( s, 2 )
export decimal2binary = ( n, complement ) ->
    if n == 0
        if complement
            return "00000000", 8

        return "0", 1

    sign = n < 0
    if sign
        n = -n

    local bits, length
    if sign
        bits, length = { "-" }, 1
    else
        bits, length = {}, 0

    while n > 0
        length += 1
        bits[ length ] = n % 2 == 0 and "0" or "1"
        n = floor( n / 2 )

    length += 1

    for index = 1, floor( length / 2 ), 1
        bits[ index ], bits[ length - index ] = bits[ length - index ], bits[ index ]

    length -= 1

    if complement
        zeros = max( 8, 2 ^ ceil( log( length ) / ln2 ) ) - length
        return rep( "0", zeros ) .. concat( bits, "", 1, length ), length + zeros

    return concat( bits, "", 1, length ), length

export hex2decimal = ( s ) -> tonumber( s, 16 )
export decimal2hex = ( n ) -> format( "%X", n )

export hex2binary = ( s ) -> decimal2binary( hex2decimal( s ) )
export binary2hex = ( s ) -> decimal2hex( binary2decimal( s ) )

-- Arithmetic
export add = ( a, b ) -> a + b
export sub = ( a, b ) -> a - b
export mul = ( a, b ) -> a * b
export div = ( a, b ) -> a / b
export mod = ( n, d ) -> n - d * floor( n / d )
export split = ( a ) -> floor( a ), a % 1

-- Clamp
export clamp = ( n, a, b ) -> min( max( n, a ), b )
export clamp01 = ( n ) -> clamp( n, 0, 1 )

-- Lerp
export lerp = ( d, a, b ) -> a + ( b - a ) * d
export lerp01 = ( d, a, b ) -> lerp( a, b, clamp01( d ) )

-- Inverse Lerp
export ilerp = ( d, a, b ) -> ( d - a ) / ( b - a )
export ilerp01 = ( d, a, b ) -> ilerp( clamp01( d ), a, b )

-- Remap
export remap = ( n, a, b, c, d ) -> c + ( d - c ) * ( n - a ) / ( b - a )
export remap01 = ( n, a, b ) -> remap( n, a, b, 0, 1 )

-- Snap
export snap = ( n, a ) -> floor( n / a + 0.5 ) * a

-- Degrees and Radians
export dtor = ( n ) -> n * pi / 180
export rtod = ( n ) -> n * 180 / pi

-- Angle
export angle = ( x1, y1, x2, y2 ) -> rtod( atan2( y2 - y1, x2 - x1 ) )
export anorm = ( a ) -> ( ( a + 180 ) % 360 ) - 180
export adiff = ( a1, a2 ) ->
    diff = anorm( a1 - a2 )
    if diff < 180
        return diff

    return diff - 360

-- Magnitude
export magnitude = ( x1, y1, x2, y2 ) -> sqrt( pow( x2 - x1, 2 ) + pow( y2 - y1, 2 ) )

-- Normalize
export direction = ( x1, y1, x2, y2 ) ->
    diff = magnitude( x1, y1, x2, y2 )
    if diff == 0
        return 0, 0

    return ( x2 - x1 ) / diff, ( y2 - y1 ) / diff

-- Dot
export dot = ( x1, y1, x2, y2 ) -> x1 * x2 + y1 * y2

-- Range
export isinrange = ( n, a, b ) -> n >= a and n <= b
export trianglesign = ( x1, y1, x2, y2, x3, y3 ) -> ( x1 - x3 ) * ( y2 - y3 ) - ( x2 - x3 ) * ( y1 - y3 )

export inrect = ( x, y, x1, y1, x2, y2 ) -> inrange( x, x1, x2 ) and inrange( y, y1, y2 )
export incircle = ( x, y, cx, cy, r ) -> pow( x - cx, 2 ) + pow( y - cy, 2 ) <= pow( r, 2 )
export ontangent = ( x, y, x1, y1, x2, y2 ) -> trianglesign( x, y, x1, y1, x2, y2 ) == 0
export intriangle = ( x, y, x1, y1, x2, y2, x3, y3 ) -> trianglesign( x, y, x1, y1, x2, y2 ) * trianglesign( x, y, x2, y2, x3, y3 ) > 0

export inpoly = ( x, y, poly ) ->
    inside, length = false, #poly

    j = length
    for i = 1, length
        px, py, lpx, lpy = poly[ i ][ 1 ], poly[ i ][ 2 ], poly[ j ][ 1 ], poly[ j ][ 2 ]
        if ( py < y and lpy >= y or lpy < y and py >= y ) and ( px + ( y - py ) / ( lpy - py ) * ( lpx - px ) < x )
            inside = not inside

        j = i

    return inside
