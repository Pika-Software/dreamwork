import MsgC, Color, string, os, tostring from _G
import format, gsub, sub, len from string
import Queue from gpm.util
import date from os

secondary_text = Color( 150, 150, 150 )
primary_text = Color( 200, 200, 200 )
white = Color( 255, 255, 255 )
info = Color( 70, 135, 255 )
warn = Color( 255, 130, 90 )
error = Color( 250, 55, 40 )
debug = Color( 0, 200, 150 )

local state, state_color
if MENU_DLL
    state = "Main Menu"
    state_color = Color( 75, 175, 80 )
elseif CLIENT
    state = "Client"
    state_color = Color( 225, 170, 10 )
elseif SERVER
    state = "Server"
    state_color = Color( 5, 170, 250 )
else
    state = "Unknown"
    state_color = white

state = "[" .. state .. "] "

queue = Queue( 256 )

timer.Create "GLua Package Manager::Logger", 1 / 10, 0, ->
    data = queue\dequeue!
    unless data
        return

    MsgC( secondary_text, date( "%d-%m-%Y %H:%M:%S " ), state_color, state, data[ 1 ], data[ 2 ], secondary_text, " --> ", data[ 3 ], data[ 4 ], secondary_text, " : ", data[ 5 ], data[ 6 ] .. "\n" )
    return

log = ( color, level, str, ... ) =>
    if @interpolation
        args = {...}
        for index = 1, #args
            args[ tostring( index ) ] = tostring( args[ index ] )

        str = gsub( str, "{([0-9]+)}", args )
    else
        str = format( str, ... )

    title = @title

    titleLength = len( title )
    if titleLength > 64
        title = sub( title, 1, 64 )
        titleLength = 64
        @title = title

    if ( len( str ) + titleLength ) > 950
        str = sub( str, 1, 950 - titleLength ) .. "..."

    queue\enqueue( { color, level, @title_color, title, @text_color, str } )
    return

developer = GetConVar( "developer" )

debugFilter = ->
    return developer\GetInt! > 0

export default class Logger
    __tostring: =>
        return format( "Logger: %p [%s]", @, @title )

    new: ( @title = "unknown", @title_color = white, @interpolation = true, @debug_filter = debugFilter ) =>
        @text_color = primary_text

    Log: log

    Info: ( ... ) =>
        log( @, info, " INFO ", ... )
        return

    Warn: ( ... ) =>
        log( @, warn, " WARN ", ... )
        return

    Error: ( ... ) =>
        log( @, error, "ERROR ", ... )
        return

    Loaded: ( ... ) =>
        log( @, debug, "LOADED", ... )
        return

    Debug: ( ... ) =>
        if @debug_filter( ... )
            log( @, debug, "DEBUG ", ... )

        return
