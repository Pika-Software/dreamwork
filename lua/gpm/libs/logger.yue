_G = _G
import gpm, timer, tostring from _G
import environment, IsInDebug from gpm

import format, gsub, sub, len from environment.string
import util, Color, argument from environment

isLoading = true
timer.Simple 0, ->
    isLoading = false

dateScheme, limit = "%d-%m-%Y %H:%M:%S ", 200
do

    import FCVAR_ARCHIVE, CreateConVar from _G

    dateScheme = CreateConVar( "gpm_logger_date", "0", FCVAR_ARCHIVE, "Allows the logger to display date.", 0, 1 )\GetBool! and "%d-%m-%Y %H:%M:%S " or "%H:%M:%S "
    limit = CreateConVar( "gpm_logger_limit", limit, FCVAR_ARCHIVE, "Maximum number of messages displayed per second.", 0, 2 ^ 16 )\GetInt!

do

    import AddChangeCallback from _G.cvars

    AddChangeCallback( "gpm_logger_date", ( _, __, new ) ->
        dateScheme = ( new == "1" and "%d-%m-%Y %H:%M:%S " or "%H:%M:%S ")
    "GLua Package Manager::Logger")

    AddChangeCallback( "gpm_logger_limit", ( _, __, new ) ->
        limit = tonumber( new, 10  )
        if limit
            timer.Adjust( "GLua Package Manager::Logger", 1 / limit, 0 )

        return nil
    "GLua Package Manager::Logger" )

secondaryTextColor = Color( 150, 150, 150 )
primaryTextColor = Color( 200, 200, 200 )
white = Color( 255, 255, 255 )
info = Color( 70, 135, 255 )
warn = Color( 255, 130, 90 )
error = Color( 250, 55, 40 )
debug = Color( 0, 200, 150 )

local state, stateColor
if MENU_DLL
    state = "[Main Menu] "
    stateColor = Color( 75, 175, 80 )
elseif CLIENT
    state = "[ Client ]  "
    stateColor = Color( 225, 170, 10 )
elseif SERVER
    state = "[ Server ]  "
    stateColor = Color( 5, 170, 250 )
else
    state = "[ Unknown ] "
    stateColor = white

queue = util.Queue!

local display
do

    import date from environment.os
    import MsgC from environment

    display = ( levelColor, level, titleColor, title, msgColor, msg ) ->
        MsgC( secondaryTextColor, date( dateScheme ), stateColor, state, levelColor, level, secondaryTextColor, " --> ", titleColor, title, secondaryTextColor, " : ", msgColor, msg .. "\n" )
        return nil

dequeue = ->
    data = queue\Dequeue!
    if data
        display( data[ 1 ], data[ 2 ], data[ 3 ], data[ 4 ], data[ 5 ], data[ 6 ] )

    return nil

timer.Create( "GLua Package Manager::Logger", 1 / limit, 0, dequeue )

_G.hook.Add "ShutDown", "GLua Package Manager::Logger", ->
    timer.Remove "GLua Package Manager::Logger"

    while not queue\IsEmpty!
        dequeue!

    return nil

log = ( color, level, str, ... ) =>
    if @interpolation
        args = {...}
        for index = 1, #args
            args[ tostring( index ) ] = tostring( args[ index ] )

        str = gsub( str, "{([0-9]+)}", args )
    else
        str = format( str, ... )

    title = @title

    titleLength = len( title )
    if titleLength > 64
        title = sub( title, 1, 64 )
        titleLength = 64
        @title = title

    if ( len( str ) + titleLength ) > 950
        str = sub( str, 1, 950 - titleLength ) .. "..."

    if isLoading
        display( color, level, @title_color, title, @text_color, str )
    else
        queue\Enqueue( { color, level, @title_color, title, @text_color, str } )

    return nil

loggerClass = environment.class( "Logger", {
    __tostring: =>
        return format( "Logger: %p [%s]", @, @title )

    new: ( title, title_color, interpolation, debug_func ) =>
        argument( title, 1, "string" )
        @title = title

        if title_color
            argument( title_color, 2, "Color" )
            @title_color = title_color
        else
            @title_color = white

        if interpolation == nil
            @interpolation = true
        else
            @interpolation = interpolation == true

        if debug_fn
            argument( debug_func, 1, "function" )
            @IsInDebug = debug_func
        else
            @IsInDebug = IsInDebug

        @text_color = primaryTextColor
        return nil

    Log: log

    Info: ( ... ) =>
        log( @, info, "INFO ", ... )
        return nil

    Warn: ( ... ) =>
        log( @, warn, "WARN ", ... )
        return nil

    Error: ( ... ) =>
        log( @, error, "ERROR", ... )
        return nil

    Debug: ( ... ) =>
        if @IsInDebug!
            log( @, debug, "DEBUG", ... )

        return nil
} )

util.Logger = loggerClass

logger = loggerClass( "gpm@" .. gpm.VERSION, environment.Color( 180, 180, 255 ), false )
gpm.Logger = logger
return logger
