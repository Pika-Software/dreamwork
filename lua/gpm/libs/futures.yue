from _G import gpm, setmetatable
from gpm import environment, string, RuntimeError, FutureError, FutureCancelError, TypeError, InvalidStateError
from gpm import throw, iserror, isstring, isnumber, isthread, isfunction, tostring, type, getmetatable, xpcall, pcall
from string import match


futures = environment.futures
unless futures
    futures = environment.futures = {}

    futures.listeners = {}
    setmetatable( futures.listeners, { __mode: "kv" } )

listeners = futures.listeners


ACTION_RUN = futures.ACTION_RUN = 1 -- runs async thread in background
ACTION_ITERATE = futures.ACTION_ITERATE = 2 -- iterates async thread until first yield or return
ACTION_CANCEL = futures.ACTION_CANCEL = 3 -- cancels async thread
ACTION_WAKEUP = futures.ACTION_WAKEUP = 4 -- continues async thread execution after pending it

RESULT_FINISHED = futures.RESULT_FINISHED = 6 -- async thread finished
RESULT_FAILED = futures.RESULT_FAILED = 7 -- used in case if main thread is awaiting for async thread to finish (only used internally, function listeners should not recieve this)
RESULT_PENDING = futures.RESULT_PENDING = 8 -- marks that async thread is waiting for async task to finish
RESULT_YIELDING = futures.RESULT_YIELDING = 9 -- marks that async thread is yielding
RESULT_CANCELLED = futures.RESULT_CANCELLED = 10 -- marks that async thread execution was cancelled


-- low level API to control coroutines
-- also allows to use coroutines symmetricaly
coro = futures.coro = {}

coroCreate = coro.create = coroutine.create
coroStatus = coro.status = coroutine.status
coroRunning = coro.running = coroutine.running
coroResume = coro.resume = coroutine.resume
coroYield = coro.yield = coroutine.yield

-- transforms RESULT_FAILED into error
handleTransfer = ( ok, value, ... ) ->
    if ok and value == RESULT_FAILED
        return false, ...
    
    return ok, value, ...

-- low level API for symmetrically transfering data between coroutines
-- if thread == nil then coro.yield(...) is called
coroTransfer = coro.transfer = ( thread, ... ) ->
    status = thread and coroStatus( thread ) or "normal"
    if status == "normal" -- probably thread resumed us, just return result
        return handleTransfer( true, coroYield( ... ) )
    
    if status == "suspended" -- thread is waiting for us to resume it
        return handleTransfer( coroResume( thread, ... ) )
    
    if status == "dead"
        return false, FutureError( "coro.transfer(...): thread '#{thread}' is dead, unable to transfer data to it" )

    if status == "running"
        return false, FutureError( "coro.transfer(...): running == thread" )

    return false, FutureError( "coro.transfer(...): unknown status '#{status}' for thread '#{thread}'" )


isCancel = ( err ) -> iserror( err, "FutureCancelError" )

transformError = ( err ) ->
    if isnumber( err )
        err = tostring( err )

    if isstring( err )
        file, line, message = match( err, "^([A-Za-z0-9%-_/.]+):(%d+): (.*)" )
        if file and line
            err = RuntimeError( message, file, line, 5 )
        else
            err = RuntimeError( err, nil, nil, 4 )
            err.fileName = nil
            err.lineNumber = nil

    return err

displayError = ( err ) ->
    if iserror( err )
        return err\display()
    
    return RuntimeError.display( err )


asyncBackgroundThread = ( silent, ok, err ) ->
    if not silent and not ok
        return displayError( err )
    
    return RESULT_FINISHED

asyncIteratableThread = ( ok, value, ... ) ->
    current = coroRunning()
    listener = listeners[ current ]

    result = ok and RESULT_FINISHED or RESULT_FAILED

    if not ok and iserror( value, "FutureCancelError" )
        ok = true
        result = RESULT_CANCELLED

    if isthread( listener )
        status = coroStatus( listener )

        if status == "normal"
            return result, value, ...

        if status == "suspended"
            coroResume( listener, result, value, ... )
            return
        
        if status == "dead" or status == "running"
            displayError( FutureError( "listener '#{listener}' is dead/running, cannot return result" ) )
            return
    
    if isfunction( listener )
        unless ok
            listener( current, false, value, ... )
        else
            listener( current, true, result, value, ... )
        
        return
    
    displayError( FutureError( "async function in thread '#{current}' has invalid listener '#{listener}'" ) )
    return

asyncThread = ( fn, ... ) ->
    action, value = coroYield()
    if action == ACTION_RUN
        -- run async thread in background, and display error unless specified to be silent
        return asyncBackgroundThread(
            value == nil and true or value, -- silent (currently unvailable to use)
            xpcall( fn, transformError, ... ) -- ok, err
        )
    
    if action == ACTION_ITERATE
        unless isthread( value ) or isfunction( value )
            throw transformError( FutureError "async function '#{fn}' was started with invalid listener '#{value}'"  )

        listeners[ coroRunning() ] = value
        return asyncIteratableThread( xpcall( fn, transformError, ... ) )
    
    if action == ACTION_CANCEL
        return RESULT_CANCELLED, value or FutureCancelError()

    throw transformError( FutureError "async function '#{fn}' was started with invalid action '#{action}'" )
    return


environment.async = futures.async = ( fn ) ->
    return ( ... ) ->
        thread = coroCreate( asyncThread )
        
        unless ok, err := coroResume( thread, fn, ... )
            return throw err
        
        return thread


futures.run = ( thread, callback ) ->
    unless isthread( thread )
        return throw TypeError "run(...) expects a thread, got #{type( thread )}"

    if callback
        unless isfunction( callback )
            return throw TypeError "run(...) expects a function as a callback, got #{type( callback )}"

        coroResume( thread, ACTION_ITERATE, callback )
        return

    coroResume( thread, ACTION_RUN )
    return


yieldInner = ( current, listener, ok, action, value, ... ) ->
    unless ok
        if isCancel( action )
            return throw action

        -- error happened in async thread
        -- so async thread must handle it, not us
        return throw FutureCancelError("unexpected error happened in async thread")

    if action == ACTION_ITERATE
        if value and listener != value
            listeners[ current ] = value -- each iteration can have different listener

        return ...

    if action == ACTION_CANCEL
        -- listener cancelled us :(((
        throw value or FutureCancelError()

    return throw FutureError "unexpected action '#{action}' from listener '#{listener}'"

environment.yield = futures.yield = ( ... ) ->
    current = coroRunning()
    unless current
        return throw FutureError "yield(...) cannot be called outside of async function"

    listener = listeners[ current ]
    if isthread( listener )
        return yieldInner( current, listener, coroTransfer( listener, RESULT_YIELDING, ... ) )
    
    if isfunction( listener )
        return listener( current, true, RESULT_YIELDING, ... )
    
    return throw FutureError "yield(...) was called, but listener is invalid ('#{listener}')"


futures.cancel = ( thread ) ->
    current = coroRunning()
    unless current
        return throw FutureError "cancel(...) cannot be called outside of async function"

    unless isthread( thread )
        meta = getmetatable( thread )
        if meta and meta.__acancel
            return meta.__acancel( thread, current )

        return throw TypeError "cancel(...) expects a thread, got '#{thread}'"
    
    ok = coroTransfer( thread, ACTION_CANCEL, FutureCancelError() )
    return ok


anextInner = ( ok, result, ... ) ->
    unless ok
        return throw result
    
    if result == RESULT_YIELDING
        return ...

    if result == RESULT_FINISHED or result == RESULT_CANCELLED
        return -- end of iteration
    
    if result == RESULT_PENDING
        return anextInner( coroTransfer( nil, RESULT_PENDING ) )
    
    throw FutureError "unexpected result '#{result}' in anext(...)"
    return

anext = environment.anext = futures.anext = ( thread, ... ) ->
    current = coroRunning()
    unless current
        return throw FutureError "anext(...) cannot be called outside of async function"

    unless isthread( thread )
        -- support for custom defined async iterators
        meta = getmetatable( thread )
        if meta and meta.__aiter
            return meta.__aiter( thread, current )

        return throw TypeError "anext(...) expects a thread, got '#{thread}'"
    
    return anextInner( coroTransfer( thread, ACTION_ITERATE, current, ... ) )

environment.apairs = futures.apairs = ( thread, ... ) -> return anext, thread, ...


awaitInner = ( thread, ok, result, ... ) ->
    unless ok
        return throw result
    
    if result == RESULT_FINISHED
        return ...

    if result == RESULT_PENDING
        return awaitInner( thread, coroTransfer( nil, RESULT_PENDING ) )

    if result == RESULT_CANCELLED
        return
    
    if result == RESULT_YIELDING
        futures.cancel( thread ) -- cancel async generator, it is misused
        return throw FutureError "unable await(...) async generator"
    
    throw FutureError "unexpected result '#{result}' in await(...)"
    return

await = environment.await = futures.await = ( thread ) ->
    current = coroRunning()
    unless current
        return throw FutureError "await(...) cannot be called outside of async function"

    unless isthread( thread )
        -- support for custom defined awaitables
        meta = getmetatable( thread )
        if meta and meta.__await
            return meta.__await( thread, current )

        return throw TypeError "await(...) expects a thread, got '#{thread}'"
    
    return awaitInner( thread, coroTransfer( thread, ACTION_ITERATE, current ) )

environment.pawait = futures.pawait = ( thread ) -> return pcall( await, thread )


isawaitable = environment.isawaitable = futures.isawaitable = ( any ) ->
    if isthread( any )
        return true
    
    meta = getmetatable( any )
    return meta and meta.__await


-- Suspends current coroutine until futures.continue(...) is called
-- Used internally by Future
pending = futures.pending = ->
    unless coroRunning()
        return throw FutureError "futures.pending() cannot be called outside of async function"

    action, value = coroYield( RESULT_PENDING )
    if action == ACTION_CANCEL
        return throw value or FutureCancelError()
    
    if action == ACTION_WAKEUP
        return value
    
    throw FutureError "unexpected action '#{action}' in futures.pending(...)"

-- Resumes coroutine that was waiting with futures.pending(...)
-- You also can optionally pass a value to it
-- Used internally by Future
wakeup = futures.wakeup = ( thread, value ) ->
    coroResume( thread, ACTION_WAKEUP, value )
    return


do
    FUTURE_STATE_PENDING = 1
    FUTURE_STATE_FINISHED = 2
    FUTURE_STATE_CANCELLED = 3

    _runCallbacks = =>
        callbacks = @_callbacks
        unless callbacks
            return
        
        @_callbacks = []
        for fn in *callbacks
            xpcall( fn, displayError, @ )
    
    done = => @_state != FUTURE_STATE_PENDING
    cancelled = => @_state == FUTURE_STATE_CANCELLED

    result = =>
        if @_state == FUTURE_STATE_CANCELLED
            return throw InvalidStateError "future was cancelled"
        elseif @_state != FUTURE_STATE_FINISHED
            return throw InvalidStateError "future is not finished yet"

        if @_error
            return throw( @_error )
        
        return @_result

    addCallback = ( fn ) =>
        if done( @ )
            xpcall( fn, RuntimeError.display, @ )
        else
            @_callbacks[] = fn

    Future = environment.Future = futures.Future = environment.class( "Future", {
        :FUTURE_STATE_PENDING
        :FUTURE_STATE_FINISHED
        :FUTURE_STATE_CANCELLED

        :done
        :cancelled
        :cancel
        :addCallback
        :result

        new: =>
            @_state = FUTURE_STATE_PENDING
            @_callbacks = []

        error: =>
            if @_state == FUTURE_STATE_CANCELLED
                throw InvalidStateError "future was cancelled"
            elseif @_state != FUTURE_STATE_FINISHED
                throw InvalidStateError "future is not finished yet"
            
            return @_error

        setResult: ( result ) =>
            if @_state != FUTURE_STATE_PENDING
                throw InvalidStateError "future is already finished"
            
            @_result = result
            @_state = FUTURE_STATE_FINISHED
            _runCallbacks( @ )
            return

        setError: ( err ) =>
            if @_state != FUTURE_STATE_PENDING
                throw InvalidStateError "future is already finished"
            
            @_error = err
            @_state = FUTURE_STATE_FINISHED
            _runCallbacks( @ )
            return
        
        cancel: =>
            if done( @ )
                return false
            
            @_state = FUTURE_STATE_CANCELLED
            _runCallbacks( @ )
            return true
        
        removeCallback: ( fn ) =>
            callbacks = []
            for cb in *@_callbacks
                if cb != fn
                    callbacks[] = cb
            @_callbacks = callbacks
    
        __await: ( current ) =>
            unless done( @ )
                addCallback( @, -> wakeup( current ) )
                pending()

            unless done( @ )
                throw InvalidStateError "future is not finished even after it's state changed???"
            
            return result( @ )

        __acancel: =>
            return @\cancel()
    } )

    environment.isfuture = futures.IsFuture = ( any ) ->
        metatable = getmetatable( any )
        return metatable and metatable.__class == Future


do
    import Future, run from futures

    cancelThread = futures.cancel
    cancelFuture = Future.cancel
    setResult = Future.setResult
    setError = Future.setError

    cancel = ( ... ) =>
        cancelThread( @_thread )
        return cancelFuture( @, ... )

    Task = environment.Task = futures.Task = environment.class( "Task", {
        new: ( thread ) =>
            unless isthread( thread )
                return throw TypeError "Task(...) expects a thread, got #{type( thread )}"

            -- ugly, but yeah, this is gpm classes
            @__class.__parent.__init( @ )

            @_thread = thread

            run( thread, ( thread, ok, result, ... ) ->
                unless ok
                    return setError( @, result )
                
                if result == RESULT_FINISHED
                    return setResult( @, ... )
                
                if result == RESULT_YIELDING
                    cancelThread( thread )
                    return setError( @, FutureError "Task(...) unable to wait for async generator result" )
                
                if result == RESULT_CANCELLED
                    return cancelFuture( @ )
                
                setError( @, FutureError( "unexpected result '#{result}' from thread '#{thread}'" ) )
            )

            return
        
        :cancel

        getThread: => return @_thread
    }, nil, Future )

    -- Make set* methods private
    Task.__base.setResult = nil
    Task.__base.setError = nil


do
    import Future, async, await from futures
    import QueueIsFull, QueueIsEmpty from environment

    -- Basic queue without any async stuff, just put and get
    BasicQueue = futures.BasicQueue = environment.class( "BasicQueue", {
        new: =>
            @_queue = {}
            @_getp = 0
            @_putp = 0

        -- Puts value into queue, returns true if successfull, false if value is nil
        put: ( value ) =>
            if value != nil -- if value is not nil, put it into queue
                @_putp += 1
                @_queue[ @_putp ] = value
                return true
            
            return false
        
        -- Gets value from queue, returns nil if queue is empty
        get: =>
            if @_getp != @_putp -- only do anything if queue is not empty
                @_getp += 1
                value = @_queue[ @_getp ]
                @_queue[ @_getp ] = nil -- remove reference to value

                if @_getp == @_putp -- if queue is empty, reset pointers
                    @_getp = 0
                    @_putp = 0
                
                return value
        
        -- Returns size of the queue
        size: => @_putp - @_getp
        -- Returns true if queue is empty
        empty: => @_getp == @_putp
    } )

    futures.Queue = environment.class( "Queue", {
        new: ( maxSize = 0 ) =>
            if maxSize < 0
                return throw TypeError "Queue(...) expects maxSize to be >= 0, got #{maxSize}"

            @_queue = BasicQueue()
            @_getters = BasicQueue()
            @_setters = BasicQueue()
            @_closed = false
            @_maxSize = maxSize
        
        qsize: => @_queue\size()
        empty: => @_queue\empty()

        -- Returns true if queue currently is full
        full: =>
            if @_maxSize == 0
                return false
            
            return @qsize() >= @_maxSize

        -- Puts value into queue, return true if successfull, false if queue is full
        putNow: ( value ) =>
            if @full() or @closed()
                return false

            if @_queue\put( value )
                if getter := @_getters\get()
                    wakeup( getter )
                
                return true

            return false

        -- Returns value from the queue (basically pops it)
        -- returns nil if queue is empty
        getNow: => 
            if @empty() or @closed()
                return nil
            
            value = @_queue\get()
            if value != nil
                if setter := @_setters\get()
                    wakeup( setter )

            return value

        -- Returns value from the queue, or awaits untils a value is available
        get: async ( block = true ) =>
            while block and @empty() and not @closed()
                @_getters\put( coroRunning() )
                pending()
            
            return @getNow()
        
        -- Puts value into queue, or awaits untils a space is available (if maxsize is specified)
        put: async ( value, block = true ) =>
            while block and @full() and not @closed()
                @_setters\put( coroRunning() )
                pending()
            
            return @putNow( value )
        
        -- Closes the queue, all getters will get nil, all putters will get false
        close: =>
            if @_closed
                return

            @_closed = true
            while not @_getters\empty()
                wakeup( @_getters\get() )
            
            while not @_setters\empty()
                wakeup( @_setters\get() )
            
            return
        
        closed: => @_closed
    } )


do
    import Future, Task from futures

    -- converts thread to Task and waits for task/future-like object to finish and calls callback with task
    waitForTask = ( task, fn ) ->
        if isthread( task )
            task = Task( task )
        
        unless task.addCallback and task.result and task.error and task.cancelled
            return false
        
        task\addCallback( fn )

        return true

    futures.all = ( tasks ) ->
        fut, results, taskLen = Future(), {}, #tasks
        if taskLen != 0
            totalDone = 0
            for i = 1, taskLen
                waitForTask( tasks[i], (task) ->
                    if fut\done()
                        return
                    
                    if task\cancelled()
                        fut\cancel()
                        return
                    
                    if err := task\error()
                        fut\setError( err )
                        return
                    
                    results[i] = task\result()
                    totalDone += 1
                    if totalDone == taskLen
                        fut\setResult( results )
                )
        else
            fut\setResult( results )

        return fut

    futures.allSettled = ( tasks ) ->
        fut, results, taskLen = Future(), {}, #tasks
        if taskLen != 0
            totalDone = 0
            for i = 1, taskLen
                waitForTask( tasks[i], (task) ->
                    if fut\done()
                        return
                    
                    -- backwards compability with promise.allSettled? do we need it?
                    status = (task\cancelled() or task\error()) and "rejected" or "fulfilled"

                    results[i] = {
                        :status
                        value: status == "fulfilled" and task\result() or nil
                        reason: status == "rejected" and task\error() or nil
                    }

                    totalDone += 1
                    if totalDone == taskLen
                        fut\setResult( results )
                )
        else
            fut\setResult( results )

        return fut

do
    import Simple from gpm.timer
    import Future, await from futures

    sleep = futures.sleep = ( seconds, result ) ->
        fut = Future()
        Simple( seconds, -> fut\setResult(result) )
        return fut

    environment.sleep = ( ... ) -> return await sleep( ... )
