if SERVER
    AddCSLuaFile!

debug_setmetatable = debug.setmetatable
rawget = rawget
error = error
type = type

lib = gpm.Table( gpm, "metaworks", {
    VERSION: "1.0.0"
} )

lib.GetValue = table.Lookup

do

    table_SetValue = table.SetValue
    debug_setfenv = debug.setfenv

    lib.SetValue = ( tbl, keyPath, value ) ->
        if type( value ) == "function" then
            debug_setfenv( value, tbl )
        table_SetValue( tbl, keyPath, value )

metaworks_GetLinks = ( any ) ->
    return rawget( any, "__indexes" )
lib.GetLinks = metaworks_GetLinks

do
    table_RemoveByIValue = table.RemoveByIValue
    lib.UnLink = ( table1, table2 ) ->
        table_RemoveByIValue( metaworks_GetLinks( table1 ), table2 )
        return table1

metaworks_Link = nil
do

    metaworks_UnLink = lib.UnLink
    table_insert = table.insert

    metaworks_Link = ( table1, table2 ) ->
        metaworks_UnLink( table1, table2 )
        table_insert( metaworks_GetLinks( table1 ), 1, table2 )
        return table1
    lib.Link = metaworks_Link

do

    meta = lib.ObjectMeta
    if type( meta ) ~= "table"
        meta = {}
        lib.ObjectMeta = meta

    meta.__index = ( key ) ->
        for link in *metaworks_GetLinks( @ )
            value = rawget( link, key )
            if value ~= nil
                return value

    lib.Create = ( any ) ->
        object = { __indexes: {} }
        unless debug_setmetatable( object, meta )
            error( "Object creation failed." )

        if any ~= nil
            return metaworks_Link( object, any )
        return object

lib.CreateLink = ( object, read, write ) ->
    meta = {}
    if read
        meta.__index = object

    if write
        meta.__newindex = object

    result = {}
    if debug_setmetatable( result, meta )
        return result, meta
    error( "Unable to create a link to a given object." )

return lib