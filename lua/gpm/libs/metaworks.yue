debug = debug

do

    :getmetatable, :setmetatable = debug
    _R = debug.getregistry!

    object = nil
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "nil" ] = metatable

    object = 0
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "number" ] = metatable

    object = ""
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "string" ] = metatable

    object = false
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "boolean" ] = metatable

    object = ->
    metatable = getmetatable( object )
    if getmetatable( object ) == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "function" ] = metatable

    object = coroutine.create( object )
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "thread" ] = metatable

table = gpm.table
rawget = rawget

lib = gpm.Table( gpm, "metaworks" )
lib.GetValue = table.GetValue

do

    isfunction = isfunction
    :SetValue = table
    :setfenv = debug

    lib.SetValue = ( tbl, keyPath, value ) ->
        if isfunction( value )
            setfenv( value, tbl )

        SetValue( tbl, keyPath, value )

GetLinks = ( tbl ) ->
    return rawget( tbl, "__indexes" )

lib.GetLinks = GetLinks

UnLink = nil
do

    :RemoveByIValue = table

    UnLink = ( table1, table2 ) ->
        RemoveByIValue( GetLinks( table1 ), table2 )
        return table1

    lib.UnLink = UnLink

Link = nil
do

    :insert = table

    Link = ( table1, table2 ) ->
        UnLink( table1, table2 )
        insert( GetLinks( table1 ), 1, table2 )
        return table1

    lib.Link = Link

do

    getmetatable = getmetatable
    setmetatable = setmetatable
    rawset = rawset

    CreateLink = ( object, read, write ) ->
        metatable = {
            "__index": read == true and object or nil
            "__newindex": write == true and object or nil
        }

        return setmetatable( {}, metatable ), metatable

    lib.CreateLink = CreateLink

    meta = {
        __index: ( tbl, key ) ->
            links = GetLinks( tbl )
            for index = 1, #links
                value = links[ index ][ key ]
                if value ~= nil
                    if getmetatable( value ) == nil
                        value = CreateLink( value, true )
                        rawset( tbl, key, value )
                        return value

                    return value
    }

    lib.Create = ( child ) ->
        tbl = { __indexes: {} }
        setmetatable( tbl, meta )

        if child ~= nil
            Link( tbl, child )

        return tbl

export default lib
