debug_setmetatable = debug.setmetatable
isfunction = isfunction
istable = istable
table = gpm.table
rawget = rawget
error = error

lib = gpm.Table( gpm, "metaworks", -> {
    VERSION: "1.0.0"
} )

lib.GetValue = table.Lookup

do

    :SetValue = table
    :setfenv = debug

    lib.SetValue = ( tbl, keyPath, value ) ->
        if isfunction( value )
            setfenv( value, tbl )

        SetValue( tbl, keyPath, value )

GetLinks = ( tbl ) ->
    return rawget( tbl, "__indexes" )

lib.GetLinks = GetLinks

UnLink = nil
do

    :RemoveByIValue = table

    UnLink = ( table1, table2 ) ->
        RemoveByIValue( GetLinks( table1 ), table2 )
        return table1

    lib.UnLink = UnLink

Link = nil
do

    :insert = table

    Link = ( table1, table2 ) ->
        UnLink( table1, table2 )
        insert( GetLinks( table1 ), 1, table2 )
        return table1

    lib.Link = Link

do

    meta = {
        __index: ( tbl, key ) ->
            value = nil
            for link in *GetLinks( tbl ) 
                value = link[ key ]
                if value ~= nil
                    break

            return value

    }

    lib.Create = ( tbl ) ->
        object = {
            __indexes: {}
        }

        debug_setmetatable( object, meta )

        if tbl ~= nil
            Link( @, tbl )

        return object

lib.CreateLink = ( object, read, write ) ->
    meta = {}
    if read
        meta.__index = object

    if write
        meta.__newindex = object

    result = {}
    if debug_setmetatable( result, meta )
        return result, meta

    error( "Unable to create a link to a given object." )

export default lib
