setmetatable = debug.setmetatable or setmetatable
table = gpm.table
rawget = rawget
error = error

lib = gpm.Table gpm, "metaworks", -> {
    VERSION: "1.0.0"
}

lib.GetValue = table.GetValue

do

    isfunction = isfunction
    :SetValue = table
    :setfenv = debug

    lib.SetValue = ( tbl, keyPath, value ) ->
        if isfunction( value )
            setfenv( value, tbl )

        SetValue( tbl, keyPath, value )

lib_GetLinks = ( tbl ) ->
    return rawget( tbl, "__indexes" )

lib.GetLinks = lib_GetLinks

lib_UnLink = nil
do

    :RemoveByIValue = table

    lib_UnLink = ( table1, table2 ) ->
        RemoveByIValue( lib_GetLinks( table1 ), table2 )
        return table1

    lib.UnLink = lib_UnLink

lib_Link = nil
do

    :insert = table

    lib_Link = ( table1, table2 ) ->
        lib_UnLink( table1, table2 )
        insert( lib_GetLinks( table1 ), 1, table2 )
        return table1

    lib.Link = lib_Link

do

    meta = {}

    do

        links, value = nil, nil

        meta.__index = ( key ) =>
            links, value = lib_GetLinks( @ ), nil
            for index = 1, #links
                value = links[ index ][ key ]
                if value ~= nil
                    break

            return value

    lib.Create = ( otherObject ) ->
        object = { __indexes: {} }
        setmetatable( object, meta )

        if otherObject ~= nil
            lib_Link( object, otherObject )

        return object

lib.CreateLink = ( object, read, write ) ->
    meta = {}
    if read
        meta.__index = object

    if write
        meta.__newindex = object

    result = {}
    if setmetatable( result, meta )
        return result, meta

    error( "Unable to create a link to a given object." )

export default lib
