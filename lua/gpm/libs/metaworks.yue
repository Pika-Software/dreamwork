import table, debug from gpm.environment

do

    :getmetatable, :setmetatable = debug
    _R = debug.getregistry!

    object = nil

    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "nil" ] = metatable

    object = 0

    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "number" ] = metatable

    object = ""

    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "string" ] = metatable

    object = false

    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "boolean" ] = metatable

    object = ->

    metatable = getmetatable( object )
    if getmetatable( object ) == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "function" ] = metatable

    object = coroutine.create( object )

    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R[ "thread" ] = metatable

import getmetatable, setmetatable, rawget, rawset from _G

metaworks = {
    GetValue: table.GetValue
}

do

    import SetValue from table
    import setfenv from debug
    isfunction = isfunction

    metaworks.SetValue = ( tbl, keyPath, value ) ->
        if isfunction( value )
            setfenv( value, tbl )

        SetValue( tbl, keyPath, value )

getLinks = ( tbl ) ->
    return rawget( tbl, "__indexes" )

metaworks.GetLinks = getLinks

local unLink
do

    import RemoveByValue from table

    unLink = ( table1, table2 ) ->
        RemoveByValue( getLinks( table1 ), table2, true )
        return table1

    metaworks.UnLink = unLink

local link
do

    import insert from table

    link = ( table1, table2 ) ->
        unLink( table1, table2 )
        insert( getLinks( table1 ), 1, table2 )
        return table1

    metaworks.Link = link

do

    linkedTable = ( object, read, write ) ->
        metatable = {
            "__index": read == true and object or nil
            "__newindex": write == true and object or nil
        }

        return setmetatable( {}, metatable ), metatable

    metaworks.LinkedTable = linkedTable

    meta = {
        __index: ( tbl, key ) ->
            links = getLinks( tbl )
            for index = 1, #links
                value = links[ index ][ key ]
                if value ~= nil
                    if getmetatable( value ) == nil
                        value = linkedTable( value, true )
                        rawset( tbl, key, value )
                        return value

                    return value
    }

    metaworks.Environment = ( other, base ) ->
        local env
        if base
            rawset( base, "__indexes", {} )
            env = base
        else
            env = { __indexes: {} }

        setmetatable( env, meta )

        if other
            link( env, other )

        return env

return metaworks
