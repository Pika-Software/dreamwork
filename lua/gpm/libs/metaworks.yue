debug_setmetatable = debug.setmetatable
isfunction = isfunction
istable = istable
table = gpm.table
rawget = rawget
error = error

lib = gpm.Table( gpm, "metaworks", -> {
    VERSION: "1.0.0"
} )

lib.GetValue = table.Lookup

do

    table_SetValue = table.SetValue
    debug_setfenv = debug.setfenv

    lib.SetValue = ( tbl, keyPath, value ) ->
        if isfunction( value )
            debug_setfenv( value, tbl )
        table_SetValue( tbl, keyPath, value )

lib_GetLinks = ( any ) ->
    return rawget( any, "__indexes" )
lib.GetLinks = lib_GetLinks

lib_UnLink = nil
do

    table_RemoveByIValue = table.RemoveByIValue

    lib_UnLink = ( table1, table2 ) ->
        table_RemoveByIValue( lib_GetLinks( table1 ), table2 )
        return table1
    lib.UnLink = lib_UnLink

lib_Link = nil
do

    table_insert = table.insert

    lib_Link = ( table1, table2 ) ->
        lib_UnLink( table1, table2 )
        table_insert( lib_GetLinks( table1 ), 1, table2 )
        return table1
    lib.Link = lib_Link

-- MIT - Multi index table
class MIT
    __index: ( key ) =>
        for link in *lib_GetLinks( @ )
            value = rawget( link, key )
            if value ~= nil
                return value

    new: ( any ) =>
        @__indexes = {}
        if any ~= nil
            lib_Link( @, any )

lib.MIT = MIT

lib.CreateLink = ( object, read, write ) ->
    meta = {}
    if read
        meta.__index = object

    if write
        meta.__newindex = object

    result = {}
    if debug_setmetatable( result, meta )
        return result, meta
    error( "Unable to create a link to a given object." )

return lib