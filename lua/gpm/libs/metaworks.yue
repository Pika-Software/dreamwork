do

    :getmetatable, :setmetatable = debug
    _R = debug.getregistry!

    object = nil
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R.Nil = metatable

    object = 0
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R.Number = metatable

    object = ""
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R.String = metatable

    object = false
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R.Boolean = metatable

    object = ->
    metatable = getmetatable( object )
    if getmetatable( object ) == nil
        metatable = {}
        setmetatable( object, metatable )

    _R.Function = metatable

    object = coroutine.create( object )
    metatable = getmetatable( object )
    if metatable == nil
        metatable = {}
        setmetatable( object, metatable )

    _R.Thread = metatable

table = gpm.table
rawget = rawget

lib = gpm.Table( gpm, "metaworks" )
lib.GetValue = table.GetValue

do

    isfunction = isfunction
    :SetValue = table
    :setfenv = debug

    lib.SetValue = ( tbl, keyPath, value ) ->
        if isfunction( value )
            setfenv( value, tbl )

        SetValue( tbl, keyPath, value )

CreateLink = nil
do

    setmetatable = setmetatable

    CreateLink = ( object, read, write ) ->
        metatable = {
            "__index": read == true and object or nil
            "__newindex": write == true and object or nil
        }

        return setmetatable( {}, metatable ), metatable

    lib.CreateLink = CreateLink

GetLinks = ( tbl ) ->
    return rawget( tbl, "__indexes" )

lib.GetLinks = GetLinks

UnLink = nil
do

    :RemoveByIValue = table

    UnLink = ( table1, table2 ) ->
        RemoveByIValue( GetLinks( table1 ), table2 )
        return table1

    lib.UnLink = UnLink

Link = nil
do

    :insert = table

    Link = ( table1, table2 ) ->
        UnLink( table1, table2 )
        insert( GetLinks( table1 ), 1, table2 )
        return table1

    lib.Link = Link

do

    setmetatable = debug.setmetatable or setmetatable
    getmetatable = getmetatable
    rawset = rawset
    meta = {}

    meta.__index = ( tbl, key ) ->
        links = GetLinks( tbl )
        for index = 1, #links
            value = links[ index ][ key ]
            if value ~= nil
                if getmetatable( value ) == nil
                    value = CreateLink( value, true )
                    rawset( tbl, key, value )
                    return value

                return value

    lib.Create = ( otherObject ) ->
        object = { __indexes: {} }
        setmetatable( object, meta )

        if otherObject ~= nil
            Link( object, otherObject )

        return object

export default lib
