_G = _G

gmod_net = _G.net
unless gmod_net
    return nil

import NULL, pairs, getfenv, setmetatable, xpcall from _G
import environment from _G.gpm

import string, net, util, isnumber, isstring, Entity, TypeID, ErrorNoHaltWithStack, argument, throw, SERVER from environment
import ReadUInt, WriteUInt, ReadData, WriteData, Start from gmod_net
import byte, char, lower from string

ENTITY = FindMetaTable( "Entity" )
import EntIndex, IsValid from ENTITY

types = rawget( net, "Types" )
unless istable( types )
    types = net.Types = {}

-- C
types[ environment.TYPE_STRING ] = { net.ReadString, net.WriteString }
types[ environment.TYPE_NUMBER ] = { net.ReadDouble, net.WriteDouble }
types[ environment.TYPE_MATRIX ] = { net.ReadMatrix, net.WriteMatrix }
types[ environment.TYPE_VECTOR ] = { net.ReadVector, net.WriteVector }
types[ environment.TYPE_ANGLE ] = { net.ReadAngle, net.WriteAngle }

net.WriteType = ( value, index ) ->
    unless isnumber( index )
        index = TypeID( value )
        if index < 0
            throw "invalid type '" .. index .. "'", 2
            return nil

    data = types[ index ]
    if data
        func = data[ 2 ]
        if func
            WriteUInt( index, 16 )
            return func( value )

    throw "missing type '" .. index .. "' writer", 2
    return nil

do

    import TYPE_NIL from _G

	net.ReadType = ( index = ReadUInt( 16 ) ) ->
		if index == TYPE_NIL
            return nil

		data = types[ index ]
        if data
            func = data[ 1 ]
            if func
        		return func!

        throw "missing type '" .. index .. "' reader", 2
        return nil

if SERVER
	import NetworkStringToID, AddNetworkString from util
    import rawset from _G

    networkStrings = rawget( net, "NetworkStrings" )
    unless istable( networkStrings )
        networkStrings = setmetatable( {}, {
            __newindex: environment.debug.fempty
            __index: ( tbl, key ) ->
                value = NetworkStringToID( key )
                rawset( tbl, key, value )
                return value
        } )

        rawset( net, "NetworkStrings", networkStrings )

    net.Register = ( networkString ) ->
        fenv = getfenv( 2 )
        if fenv
            pkg = fenv.__package
            if pkg
                networkString = pkg.prefix .. networkString

        networkString = lower( networkString )

        value = networkStrings[ networkString ]
        if not value or value == 0
            value = AddNetworkString( networkString )
            rawset( networkStrings, networkString, value )

        return value

    net.Exists = ( networkString ) ->
        fenv = getfenv( 2 )
        if fenv
            pkg = fenv.__package
            if pkg
                networkString = pkg.prefix .. networkString

        return networkStrings[ lower( networkString ) ] > 0

net.Start = ( networkString ) ->
    fenv = getfenv( 2 )
    if fenv
        pkg = fenv.__package
        if pkg
            networkString = pkg.prefix .. networkString

    Start( lower( networkString ) )
    return nil

-- Network string callback registration
do

	import remove from environment.table

    external = rawget( net, "Receivers" )
    unless istable( external )
        external = net.Receivers = {}

	length = 0

	net.Receive = ( networkString, func, identifier ) ->
		networkString = lower( networkString )

		unless isstring( identifier )
			identifier = "unknown"

        networks = external
        fenv = getfenv( 2 )
        if fenv
            pkg = fenv.__package
            if pkg
                prefix = pkg.prefix
                identifier = prefix .. identifier
                networkString = prefix .. networkString

                networks = pkg.__networks
                unless networks
                    networks = pkg.__networks = {}

		functions = networks[ networkString ]
		unless functions
            functions = external[ networkString ] = {}

		length = #functions
		for index = 1, length
			if functions[ index ][ 1 ] == identifier
				remove( functions, index )
				length -= 1
				break

		functions[ length + 1 ] = {
            [ 1 ]: identifier
            [ 2 ]: func
        }

    -- Network string callback performing
    import NetworkIDToString from util
    import ReadHeader from net
    import Run from _G.hook

    gmod_receivers = gmod_net.Receivers

    gmod_net.Incoming = ( length = 16, client = NULL ) ->
        networkString = NetworkIDToString( ReadHeader! )
        if networkString == nil
            return nil

        networkString = lower( networkString )
        length -= 16

        if Run( "IncomingNetworkMessage", networkString, length, client ) == false
            return nil

        func = gmod_receivers[ networkString ]
        if func
            xpcall( func, ErrorNoHaltWithStack, length, client )

        functions = external[ networkString ]
        if functions
            for data in *functions
                xpcall( data[ 2 ], ErrorNoHaltWithStack, length, client )

        return nil

-- Boolean
do

	import ReadBit, WriteBit from gmod_net

	read = ->
	    return ReadBit! == 1

    -- bool must be an alias of bit ( because yeah... )
	net.ReadBool, net.WriteBool = read, WriteBit
    net.ReadBit = read

    types[ environment.TYPE_BOOL ] = { read, WriteBit }

-- Entity
do

	write = ( entity ) ->
		if entity and IsValid( entity )
            WriteUInt( EntIndex( entity ), 16 )
            return entity

		WriteUInt( 0, 16 )
		return entity

	read = ->
		index = ReadUInt( 16 )
		if index == nil or index == 0
			return NULL

		return Entity( index )

	net.ReadEntity, net.WriteEntity = read, write
    types[ environment.TYPE_ENTITY ] = { read, write }

-- Player
do

    maxplayers_bits = util.BitCount( _G.game.MaxPlayers! )

    net.ReadPlayer = ->
        index = ReadUInt( maxplayers_bits )
        if index == nil or index == 0
            return NULL

        return Entity( index )

    net.WritePlayer = ( ply ) ->
        if ply and IsValid( ply ) and ply\IsPlayer!
            WriteUInt( EntIndex( ply ), maxplayers_bits )
            return ply

        WriteUInt( 0, maxplayers_bits )
        return ply

-- Color
do

    metatable = FindMetaTable( "Color" )

	read = ( readAlpha ) ->
		if readAlpha == false
            r, g, b = byte( ReadData( 3 ), 1, 3 )
            return setmetatable( { :r, :g, :b, a: 255 }, metatable )

        r, g, b, a = byte( ReadData( 4 ), 1, 4 )
        return setmetatable( { :r, :g, :b, :a }, metatable )

	write = ( color, writeAlpha ) ->
		if writeAlpha == false
            WriteData( char( color.r or 255, color.g or 255, color.b or 255 ) )
			return color

        WriteData( char( color.r or 255, color.g or 255, color.b or 255, color.a or 255 ) )
		return color

	net.ReadColor, net.WriteColor = read, write
    types[ environment.TYPE_COLOR ] = { read, write }

do

    import BytesLeft from gmod_net

    readAll = ->
        return ReadData( BytesLeft!, nil )

    net.ReadAll = readAll

-- Table
do

    import ReadType, WriteType from net

	read = ( isSequential ) ->
		result = {}
		if isSequential
			for index = 1, ReadUInt( 32 )
				result[ index ] = ReadType!

			return result

		::read::

		key = ReadType!
		if key == nil
			return result

		result[ key ] = ReadType!
		goto read

        return result

	length = 0

	write = ( tbl, isSequential ) ->
		if isSequential
			length = #tbl
			WriteUInt( length, 32 )

			for index = 1, length
				WriteType( tbl[ index ] )

			return tbl, length

        length = 0

		for key, value in pairs( tbl )
			WriteType( key )
			WriteType( value )
            length += 1

		WriteUInt( 0, 16 )
        return tbl, length

	net.ReadTable, net.WriteTable = read, write
    types[ environment.TYPE_TABLE ] = { read, write }

-- SteamID
do

    import SteamID from util

    net.ReadSteamID = ( withUniverse ) ->
        return SteamID.FromBinary( ReadData( withUniverse and 5 or 4 ), false, withUniverse )

    net.WriteSteamID = ( steamID, withUniverse ) ->
        if isstring( steamID )
            steamID = SteamID( steamID )

        argument( steamID, 1, "SteamID" )
        return WriteData( steamID\ToBinary( withUniverse ) )

-- Time
do

    import dos2unix, unix2dos from environment.os

    net.ReadTime = ->
        return dos2unix( ReadUInt( 16 ), ReadUInt( 16 ) )

    net.WriteTime = ( u ) ->
        t, d = unix2dos( u )
        WriteUInt( t, 16 )
        return WriteUInt( d, 16 )

net.ReadByte = ->
    return ReadUInt( 8 )

net.WriteByte = ( number ) ->
    WriteUInt( number, 8 )
    return nil

net.ReadUShort = ->
    return ReadUInt( 16 )

net.WriteUShort = ( number ) ->
    WriteUInt( number, 16 )
    return nil

net.ReadULong = ->
    return ReadUInt( 32 )

net.WriteULong = ( number ) ->
    WriteUInt( number, 32 )
    return nil

do

    import ReadInt, WriteInt from gmod_net

    net.ReadSignedByte = ->
        return ReadInt( 8 )

    net.WriteSignedByte = ( number ) ->
        WriteInt( number, 8 )
        return nil

    net.ReadShort = ->
        return ReadInt( 16 )

    net.WriteShort = ( number ) ->
        WriteInt( number, 16 )
        return nil

    net.ReadLong = ->
        return ReadInt( 32 )

    net.WriteLong = ( number ) ->
        WriteInt( number, 32 )
        return nil
