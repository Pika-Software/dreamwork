_G = _G
import include, SERVER, istable from _G
import Find from file

unless istable( _G.gpm )
    _G.gpm = { VERSION: "2.0.0" }

if SERVER

    import AddCSLuaFile from _G

    for fileName in *Find( "gpm/libs/*.lua", "lsv" )
        AddCSLuaFile( "gpm/libs/" .. fileName )

    for fileName in *Find( "gpm/libs/utf8/*.lua", "lsv" )
        AddCSLuaFile( "gpm/libs/utf8/" .. fileName )

    for fileName in *Find( "gpm/libs/3rd-party/*.lua", "lsv" )
        AddCSLuaFile( "gpm/libs/3rd-party/" .. fileName )

    for fileName in *Find( "gpm/sources/*.lua", "lsv" )
        AddCSLuaFile( "gpm/sources/" .. fileName )

    AddCSLuaFile( "gpm/post-util.lua" )
    AddCSLuaFile( "gpm/loader.lua" )
    AddCSLuaFile( "gpm/init.lua" )
    AddCSLuaFile( "gpm/util.lua" )

import gpm from _G
gpm.StartTime = SysTime!

do

    username = cvars and cvars.String( SERVER and "hostname" or "name", "unknown user" ) or "unknown"
    gpm.UserName = username

    splashes = {
        "Why are we always looking for more?"
        "Don't worry, " .. username .. " :>"
        "Don't bring your light near me."
        "Big Brother is watching you"
        "Hello, " .. username .. "!"
        "I'll make you a promise."
        "Flying over rooftops..."
        "We need more packages!"
        "Where's fireworks!?"
        "Looking For More ♪"
        "Now on Yuescript!"
        "I'm watching you."
        "Faster than ever."
        "Love Wins Again ♪"
        "v" .. gpm.VERSION
        "Blazing fast ☄"
        "Here For You ♪"
        "Hello World!"
        "Star Glide ♪"
        "Once Again ♪"
        "Sandblast ♪"
        "That's me!"
        "I see you."
    }

    count = #splashes + 1
    splashes[ count ] = "Wow, here more " .. ( count - 1 ) .. " splashes!"

    splash = splashes[ math.random( 1, count ) ]
    for i = 1, ( 25 - #splash ) / 2
        if i % 2 == 1
            splash ..= " "

        splash = " " .. splash

    print( string.format( "\n                                     ___          __            \n                                   /'___`\\      /'__`\\          \n     __    _____     ___ ___      /\\_\\ /\\ \\    /\\ \\/\\ \\         \n   /'_ `\\ /\\ '__`\\ /' __` __`\\    \\/_/// /__   \\ \\ \\ \\ \\        \n  /\\ \\L\\ \\\\ \\ \\L\\ \\/\\ \\/\\ \\/\\ \\      // /_\\ \\ __\\ \\ \\_\\ \\   \n  \\ \\____ \\\\ \\ ,__/\\ \\_\\ \\_\\ \\_\\    /\\______//\\_\\\\ \\____/   \n   \\/___L\\ \\\\ \\ \\/  \\/_/\\/_/\\/_/    \\/_____/ \\/_/ \\/___/    \n     /\\____/ \\ \\_\\                                          \n     \\_/__/   \\/_/                %s                        \n\n  GitHub: https://github.com/Pika-Software\n  Discord: https://discord.gg/Gzak99XGvv\n  Website: https://pika-soft.ru\n  Developers: Pika Software\n  License: MIT\n", splash ) )

environment = gpm.environment
unless istable( environment )
    environment = gpm.environment = {}

do

    _G = _G

    import getmetatable, setmetatable, rawset from _G

    environment.CLIENT = _G.CLIENT == true
    environment.SERVER = _G.SERVER == true
    environment.MENU = _G.MENU_DLL == true
    environment._G = environment

    local sandboxMetatable
    sandbox = ( tbl ) ->
        return setmetatable( {}, sandboxMetatable( tbl ) )

    sandboxMetatable = ( parent ) ->
        return {
            __sandbox: true,
            __index: ( child, key ) ->
                value = parent[ key ]

                if istable( value )
                    metatable = getmetatable( value )
                    if not metatable or metatable.__sandbox
                        sbox = sandbox( value )
                        rawset( child, key, sbox )
                        return sbox

                return value
        }

    setmetatable( environment, sandboxMetatable( _G ) )
    setmetatable( gpm, { __index: environment } )

    import table from environment
    table.SandboxMetatable = sandboxMetatable
    table.Sandbox = sandbox

include( "gpm/util.lua" )

logger = gpm.Logger = include( "libs/logger.lua" )( "gpm@" .. gpm.VERSION, environment.Color( 180, 180, 255 ), false )

environment.path = include( "libs/path.lua" )

-- gm_error
for key, value in _G.pairs( include( "libs/error.lua" ) )
    environment[ key ] = value

environment.ipaml = include( "libs/3rd-party/ip.lua" )
environment.utf8 = include( "libs/utf8/init.lua" )
environment.struct = include( "libs/struct.lua" )

-- LibDeflate
deflate = include( "libs/3rd-party/deflate.lua" )
logger\Loaded( "LibDeflate v%s", deflate._VERSION )
environment.deflate = deflate

import RegisterMetaTable from environment.util

-- gm_promise
do

    promise = include( "libs/promise.lua" )

    environment.async = promise.async
    environment.await = promise.await
    environment.Promise = promise

    RegisterMetaTable( "Promise", promise.__base )

    logger\Loaded( "gm_promise v%s", promise.VERSION )

-- gm_url
do

    url = include( "libs/url.lua" )

    environment.IsURLSearchParams = url.IsURLSearchParams
    URLSearchParams = environment.URLSearchParams = url.URLSearchParams
    RegisterMetaTable( "URLSearchParams", URLSearchParams.__base )

    environment.isurl = url.IsURL
    URL = environment.URL = url.URL
    RegisterMetaTable( "URL", URL.__base )

    import http from environment

    http.EncodeURIComponent = url.encodeURIComponent
    http.DecodeURIComponent = url.decodeURIComponent
    http.EncodeURI = url.encodeURI
    http.DecodeURI = url.decodeURI

include( "post-util.lua" )
include( "libs/file.lua" )
include( "libs/http.lua" )
include( "loader.lua" )

if SERVER
    include( "cli.lua" )

-- Plugins
for fileName in *Find( "gpm/plugins/*.lua", "LUA" )
    include( "plugins/" .. fileName )

-- Code Sources
for fileName in *Find( "gpm/sources/*.lua", "LUA" )
    include( "sources/" .. fileName )

-- our little sandbox ( TODO: remove on release )
if SERVER
    include( "test.lua" )

gpm.loader.Startup!\Catch( environment.Error.display )

logger\Info( "Start-up time: %.4f sec.", SysTime! - gpm.StartTime )

return gpm
