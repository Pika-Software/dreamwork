_G = _G
import istable, gpm, tostring from _G
import environment, Logger from gpm
import table, util, CLIENT, SERVER, MENU_DLL, argument, pairs from environment
import JSONToTable, Version from util

isSQLWorker = SERVER or MENU_DLL
sql = isSQLWorker and gpm.sql.repositories or nil
sort_fn = ( a, b ) -> a.version > b.version

repositories = gpm.repositories
unless istable( repositories )
    repositories = gpm.repositories = {}

TYPE_JSON = repositories.TYPE_JSON = 0
TYPE_GITHUB = repositories.TYPE_GITHUB = 5

list = repositories.List
unless istable( list )
    if isSQLWorker
        list = sql.getRepositories!

        if #list == 0
            sql.addRepository( "https://raw.githubusercontent.com/Pika-Software/gpm-repositories/main/main.json" )
            list = sql.getRepositories!

        import getPackages from sql

        for repository in *list
            repository.packages = getPackages( repository )

        repositories.List = list

        if SERVER
            environment.file.Set( "/lua/gpm/vfs/repositories.lua", "return '" .. util.TableToJSON( list, false ) .. "'", "GLua Package Manager::Repositories" )
            _G.AddCSLuaFile( "lua/gpm/vfs/repositories.lua" )

    elseif CLIENT
        list = repositories.List = JSONToTable( _G.include( "gpm/vfs/repositories.lua" ), true, false )

getLastID = ( tbl ) ->
    id = 0
    for _, value in pairs( tbl )
        id = value.id

    return id + 1

repositories.AddRepository = ( href ) ->
    argument( href, 1, "string" )

    if table.HasValue( list, href, true )
        return nil

    if isSQLWorker
        sql.addRepository( href )

    index = #list + 1

    list[ index ] = {
        id: getLastID( list )
        packages: {}
        url: href
    }

    return index

repositories.RemoveRepository = ( href ) ->
    argument( href, 1, "string" )

    unless table.HasValue( list, href, true )
        return nil

    if isSQLWorker
        sql.removeRepository( href )

    return table.RemoveByValue( list, href, true )

import IsURL, match, find from environment.string
import sort from environment.table
import URL, async, await, futures from environment

local request
do

    import CachedFetch from environment.http

    api_token = GetConVar( "gpm_github_token" )

    request = ( href ) ->
        local headers
        if api_token
            token = api_token\GetString!
            if token and token ~= ""
                headers = { Authorization: "Bearer " .. token }

        return CachedFetch( href, headers )

apis = repositories.APIs
unless istable( apis )
    apis = repositories.APIs = {}

apis["github.com"] = ( url, name, parent ) ->
    if url.scheme ~= "https"
        return nil

    user, repository = match( url.pathname, "^/([^/]+)/([^/]+)/?$" )
    unless user and repository
        return nil

    name or= repository

    ok, response = pawait request( "https://api.github.com/repos/" .. user .. "/" .. repository .. "/tags" )
    if not ok or response.status ~= 200
        return nil

    tags = JSONToTable( response.body )
    unless tags
        return nil

    for index = 1, #tags, 1
        tags[ index ] = {
            version: Version( tags[ index ].name )
        }

    return {
        name: name
        url: user .. "/" .. repository
        type: TYPE_GITHUB
        versions: tags
    }

local fetchPackages
do

    import getExtension from environment.path
    import isstring from environment

    fetchPackages = repositories.FetchPackages = async ( url, name ) ->
        unless IsURL( url )
            if IsURL( name )
                url = name
            else
                Logger\Error( "Invalid package '#{name}' URL: #{url}" )
                return nil

        if isstring( url )
            url = URL( url )

        fn = apis[ url.hostname ]
        if fn
            return fn( url, name )

        if getExtension( url.pathname ) ~= "json"
            return nil

        ok, response = pawait request( url.href )
        if not ok or response.status ~= 200
            return nil

        tbl = JSONToTable( response.body )
        unless tbl
            return nil

        versions, length = {}, 0
        for version, href in pairs( tbl )
            length += 1
            versions[ length ] = {
                version: Version( version )
                metadata: href
            }

        return {
            name: name
            url: ""
            type: TYPE_JSON
            versions: versions
        }

local syncSQL
if isSQLWorker

    import updateRepository from sql

    syncSQL = repositories.SyncSQL = ( repository ) ->
        updateRepository( repository, repository.packages )
        return nil

performPackage = repositories.PerformPackage = ( repository, package ) ->
    unless package
        return nil

    package.repositoryId = repository.id

    :name, :versions = package
    :packages = repository
    length = #packages

    for index = 1, length, 1
        pkg = packages[ index ]
        if pkg.name == name
            pkg.url = package.url
            pkg.type = package.type

            packageVersions = pkg.versions
            count = #versions

            for index = 1, count, 1
                new, exists = versions[ index ], false
                for exist in *packageVersions
                    if new.version == exist.version
                        exists = true
                        break

                unless exists
                    count += 1
                    packageVersions[ count ] = new

            sort( packageVersions, sort_fn )

            if isSQLWorker
                syncSQL( repository )

            return nil

    package.id = getLastID( packages )
    sort( package.versions, sort_fn )
    packages[ length + 1 ] = package

    if isSQLWorker
        syncSQL( repository )

    return nil

updateRepository = repositories.UpdateRepository = async ( repository, map, pattern, withPattern ) ->
    tasks, length = {}, 0
    if pattern
        if withPattern
            for name, href in pairs( map )
                if find( name, pattern, 1, false )
                    length += 1
                    tasks[ length ] = fetchPackages( href, name )
        else
            href = map[ pattern ]
            if href
                length = 1
                tasks[ 1 ] = fetchPackages( href, pattern )
    else
        for name, href in pairs( map )
            length += 1
            tasks[ length ] = fetchPackages( href, name )

    if length == 0
        return nil

    if length == 1
        performPackage( repository, await( tasks[ 1 ] ) )
        return nil

    for result in *await( futures.allSettled( tasks ) )
        performPackage( repository, result.value )

    return nil

searchPackages = repositories.SearchPackages = ( repository, name, version, withPattern ) ->
    latest = version == "latest"
    packages, count = {}, 0

    for package in *repository.packages
        if name
            if withPattern
                unless find( package.name, name, 1, false )
                    continue

            elseif package.name ~= name
                continue

        for tbl in *package.versions
            if version and not ( latest or tbl.version % version )
                continue

            count += 1
            packages[ count ] = package

    return packages

fetchRepository = repositories.FetchRepository = async ( repository, name, version, withPattern, offlineMode ) ->
    :packages = repository

    unless name or version
        if offline
            return packages

        success, response = pawait request( repository.url )
        if not success or response.status ~= 200
            Logger\Warn( "Failed to fetch repository '%s': %s", repository.url, response )
            return packages

        map = JSONToTable( response.body, true, true )
        unless map
            return packages

        await updateRepository( repository, map, nil, false )
        return packages

    if offline
        return searchPackages( repository, name, version, withPattern )

    success, response = pawait request( repository.url )
    if not success or response.status ~= 200
        Logger\Warn( "Failed to fetch repository '%s': %s", repository.url, response )
        return searchPackages( repository, name, version, withPattern )

    map = JSONToTable( response.body, true, true )
    unless map
        return searchPackages( repository, name, version, withPattern )

    await updateRepository( repository, map, name, withPattern )
    return searchPackages( repository, name, version, withPattern )

do

    import Find from _G.file

    formatters = repositories.Formatters
    unless istable( formatters )
        formatters = repositories.Formatters = {}

    formatters[ TYPE_GITHUB ] = ( package, searchable ) ->
        local version
        if searchable
            for tbl in *package.versions
                if tbl.version % searchable
                    version = tbl.version
                    break
        else
            version = package.versions[ 1 ].version

        return {
            name: package.name
            url: "github://" .. package.url .. "/" .. tostring( version )
            version: version
        }

    formatters[ TYPE_JSON ] = ( package, searchable ) ->
        local url, version
        if searchable
            for tbl in *package.versions
                if tbl.version % searchable
                    url, version = tbl.metadata, tbl.version
                    break
        else
            tbl = package.versions[ 1 ]
            url, version = tbl.metadata, tbl.version

        return {
            name: package.name
            url: url
            version: version
        }

    str_sort = ( a, b ) -> a < b

    repositories.FindPackage = async ( name, version, offlineMode, withPattern ) ->
        argument( name, 1, "string" )

        packageName = name
        if withPattern
            _, folders = Find( "gpm/vfs/packages/*", "LUA" )
            for folderName in *folders
                if find( folderName, name, 1, false )
                    packageName = folderName
                    break

        _, versions = Find( "gpm/vfs/packages/" .. packageName .. "/*", "LUA" )
        if #versions > 0
            sort( versions, str_sort )

            local versionObj
            if version
                argument( version, 2, "string" )

                for folderName in *versions
                    versionObj = Version( folderName )
                    if versionObj % version
                        break

            else
                versionObj = Version( versions[ 1 ] )

            if versionObj
                return {
                    name: packageName
                    url: "file:///lua/gpm/vfs/packages/" .. packageName .. "/" .. tostring( versionObj ) .. "/"
                    version: versionObj
                }

        for repository in *list
            packages = await fetchRepository( repository, name, version, withPattern, offlineMode )
            if #packages ~= 0
                package = packages[ 1 ]

                formatter = formatters[ package.type ] or formatters[ TYPE_JSON ]
                if formatter
                    return formatter( package, version )

                return package

        return nil
