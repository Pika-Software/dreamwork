_G = _G
import gpm from _G
import environment from gpm
import await, async, SourceError, error from environment
import BaseSource, BaseSourceHandler, Module from gpm.loader
import MountZIPData from environment.file
import CachedFetch from environment.http
import File from environment.addon

local getExtension
do

    import extname from environment.path

    luaExtensions = {
        "luac": true
        "lua": true
        "lc": true
    }

    getExtension = ( url ) ->
        extension = url.extension
        unless extension
            extension = extname( url.pathname, false ) or ""
            if luaExtensions[ extension ]
                extension = "lua"

            url.extension = extension

        return extension

local LuaCodeHandler
do

    import isstring, load from environment

    extensions = {
        "luac": true
        "moon": true
        "yue": true
        "lua": true
        "lc": true
    }

    class LuaCodeHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return extensions[ getExtension( url ) ]

        FetchInfo: async ( url ) =>
            result = await CachedFetch( url.href )
            if result.status ~= 200
                error SourceError "failed to fetch " .. url.href

            return result.body

        Install: async ( url, content, _, env ) =>
            mode = "t"
            :extension = url
            if extension == "yue"
                mode = "y" .. mode
            elseif extension == "moon"
                mode = "m" .. mode
            elseif extension == "luac" or extension == "lc"
                mode = "b" .. mode

            config = {}
            for key, value in url.searchParams\iterator!
                config[ key ] = value

            func = load( content, await( Module.cache( url, content ) ), mode, env, config, false )
            if func
                if isstring( func )
                    error SourceError func
                    return nil

                return Module.run( func, url, env )

            error SourceError "File '" .. url.href .. "' cannot be compiled."
            return nil

class TextHandler extends BaseSourceHandler
    ShouldHandle: ( url ) =>
        return getExtension( url ) == "txt"

    FetchInfo: async ( url ) =>
        return url.href

    Install: async ( url, href ) =>
        result = await CachedFetch( href )
        if result.status ~= 200
            error SourceError "failed to fetch " .. href

        return result.body

local JSONHandler
do

    import JSONToTable from environment.util

    class JSONHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url ) == "json"

        FetchInfo: async ( url ) =>
            result = await CachedFetch( url.href )
            if result.status ~= 200
                error SourceError "failed to fetch " .. url.href

            return result.body

        Install: async ( url, json ) =>
            tbl = JSONToTable( json, true, false )
            if tbl
                return tbl

            error SourceError "failed to parse json"
            return

class GMAHandler extends BaseSourceHandler
    ShouldHandle: ( url ) =>
        return getExtension( url ) == "gma"

    FetchInfo: async ( url ) =>
        result = await CachedFetch( url.href )
        if result.status ~= 200
            error SourceError "failed to fetch " .. url.href

        return result.body

    Install: async ( url, data ) =>
        f = File( data, url.href, true )

        unless f\VerifyCRC!
            error SourceError "Invalid CRC checksum for '" .. url.href .. "'"

        return await f\AsyncMount( false )

class ZIPHandler extends BaseSourceHandler
    ShouldHandle: ( url ) =>
        return getExtension( url ) == "zip"

    FetchInfo: async ( url ) =>
        result = await CachedFetch( url.href )
        if result.status ~= 200
            error SourceError "failed to fetch " .. url.href

        return result.body

    Install: async ( url, data ) =>
        return MountZIPData( data, url.href )

class WebSource extends BaseSource

ws = WebSource( "http", "https" )
ws\RegisterHandler( LuaCodeHandler! )
ws\RegisterHandler( TextHandler! )
ws\RegisterHandler( JSONHandler! )
ws\RegisterHandler( GMAHandler! )
ws\RegisterHandler( ZIPHandler! )
