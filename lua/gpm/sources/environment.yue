_G = _G
import gpm, error from _G
import environment from gpm
import async from environment
import ByteReplace from environment.string
import GetValue from environment.table
import BaseSource, BaseSourceHandler from gpm.loader

class EnvironmentHandler extends BaseSourceHandler
    Install: async ( url, _, __, parent, env ) =>
        :pathname = url

        switch url.scheme
            when "gpm"
                if pathname == "*"
                    return environment

                return GetValue( environment, ByteReplace( pathname, 0x2F --[[ / ]], "." ) )

            when "env"
                if parent
                    if name := url.searchParams\get( "package" )
                        pkg = parent.packages[ name ]
                        unless pkg
                            error ModuleLoadError "Package '" .. name .. "' not found."

                        if pathname == "*"
                            return pkg.env

                        return GetValue( pkg.env, ByteReplace( pathname, 0x2F --[[ / ]], "." ) )

                if pathname == "*"
                    return env

                return GetValue( env, ByteReplace( pathname, 0x2F --[[ / ]], "." ) )

            else
                if pathname == "*"
                    return _G

                return GetValue( _G, ByteReplace( pathname, 0x2F --[[ / ]], "." ) )

class EnvironmentSource extends BaseSource

EnvironmentSource( "glua", "env", "gpm" )\RegisterHandler( EnvironmentHandler! )
