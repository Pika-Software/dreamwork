_G = _G
import gpm from _G
import Environment from gpm
import async, await, file, path, ModuleLoadError from Environment

--[[

    Handler List:
    [  ] lua://my_addon/init.lua ( lua, moon, yue )
    [  ] file://data/my_gma.gma ( gma, zip, lua, moon, yue )
    [  ] package://package_name ( package from lua/packages folder )

    Single File Package:
        lua://packages/pkg1.lua

    Multi-File Package:
        lua://packages/pkg2
            ||
            ||
            package.lua
                ||
                ||
                init.lua

]]

do

    import IsBinaryModuleInstalled from Environment.util
    import require from _G

    class BinaryHandler extends gpm.BaseSourceHandler
        ShouldHandle: ( url ) =>
            return true

        FetchInfo: async ( url ) =>
            :hostname = url
            return {
                name: hostname
                installed: IsBinaryModuleInstalled( hostname )
            }

        Install: async ( _, info ) =>
            :name = info
            if info.installed
                require( name )
                return _G[ name ]

            error "Binary module " .. name .. " is not installed locally!"
            return

    class BinarySource extends gpm.BaseSource

    bs = BinarySource!
    bs\RegisterHandler( BinaryHandler! )

    gpm.RegisterSource( "binary", bs )
    gpm.RegisterSource( "dll", bs )

class LuaHandler extends gpm.BaseSourceHandler
    ShouldHandle: ( url ) =>
        return true

    FetchInfo: async ( url ) =>
        return ( url.hostname or "" ) .. ( url.pathname or "" )

    Install: async ( url, filePath, parentPath, parentPackage ) =>
        if parentPath
            filePath = path.Resolve( parentPath, filePath )

        unless file.Exists( filePath, "LUA" )
            error ModuleLoadError "file not found: " .. filePath

        func = await file.Compile( filePath, "LUA" )
        gpm.ModuleEnvironment( func, url.href, parentPackage )

        return func!

class LuaSource extends gpm.BaseSource

-- Lua, MoonScript, YueScript
ls = LuaSource!
ls\RegisterHandler( LuaHandler! )
gpm.RegisterSource( "lua", ls )
gpm.RegisterSource( "moon", ls )
gpm.RegisterSource( "yue", ls )

