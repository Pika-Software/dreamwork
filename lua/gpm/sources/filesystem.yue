gpm = gpm
:Promise, :BaseSource, :BaseSourceHandler, :SourceError, :GMAD, :ByteStream, :util, :fs = gpm
:async, :await = Promise

--[[

    Handler List:
    [  ] file://data/my_gma.gma ( gma, zip, lua, moon, yue )
    [  ] module://module_name ( binarry or lua modules )
    [  ] lua://my_addon/init.lua ( lua, moon, yue )
    [  ] package://package_name ( package from lua/packages folder )

    Single File Package:
        lua://packages/pkg1.lua

    Multi-File Package:
        lua://packages/pkg2
            ||
            ||
            package.lua
                ||
                ||
                init.lua

]]

class FileHandler extends BaseSourceHandler
    SupportedExtensions: {
        "moon": true
        "yue": true
        "lua": true
        "zip": true
        "gma": true
    }

    ShouldHandle: ( url ) =>
        if url.protocol == "file"
            extension = string.GetExtensionFromFilename( url.path )
            if extension and @SupportedExtensions[ extension ]
                return true
        return false

    FetchInfo: async ( url ) =>
        filePath = string.gsub( url, "^.-://", "" )
        switch string.GetExtensionFromFilename( filePath )
            when "gma"
                result = await fs.AsyncRead( filePath, "GAME" )

                gma = GMAD!
                gma.File = ByteStream( result.content )
                gma\Parse( true )
                gma\ReadFiles( true )


                return {

                }
            when "zip"
                return {}
            when "lua"
                return {}
            when "zip"
                return {}
            when "moon"
                return {}
            when "yue"
                return {}

class ModuleHandler extends BaseSourceHandler
    ShouldHandle: ( url ) => url.protocol == "module"

    FetchInfo: async ( url ) =>
        moduleName = string.gsub( url, "^.-://", "" )
        return {
            "name": moduleName
            "type": util.IsBinaryModuleInstalled( moduleName ) and "binary" or "lua"
        }


class LuaHandler extends BaseSourceHandler
    ShouldHandle: (url) => url.protocol == "lua"

    FindPackageLua: (path) ->
        if string.EndsWith path, "package.lua"
            return path
        path ..= "package.lua" -- path.join here
        return file.Exists( path, "LUA" ) and path

    FetchInfo: async (url) =>
        path = url.path
        package_lua_path = LuaHandler.FindPackageLua path
        if package_lua_path
            env = {}
            env.dir = dir -- We are assigning here, so package.lua can define custom directory

            func = CompileFile package_lua_path
            unless func then error SourceError "Failed to compile package info file: #{package_lua_path}"

            await Promise.delay 1

            setfenv func, env
            unless success, reason = try func!
                error SourceError reason

            return env
        elseif string.EndsWith path, ".lua"
            dir = path -- extreact dir from path
            -- Make stub env
            env = {}
            env.name = "unknown" -- get name from path
            env.dir = dir --

            return env
        else
            return @FetchInfo "lua://#{path}.lua"

class PackageHandler extends BaseSourceHandler
    ShouldHandle: (url) => url.protocol == "package" -- string.StartsWith( url, "package://" )
    FetchInfo: async ( url ) =>
        url.protocol = "lua"
        url.path = gpm.path.Join "packages", url.path
        gpm.FetchInfo( url )

class FilesystemSource extends BaseSource

fs = FilesystemSource!
fs\RegisterHandler FileHandler!
fs\RegisterHandler ModuleHandler!
fs\RegisterHandler LuaHandler!
fs\RegisterHandler PackageHandler!

gpm.RegisterSource( "file", fs )
gpm.RegisterSource( "module", fs )
gpm.RegisterSource( "lua", fs )
gpm.RegisterSource( "package", fs )
