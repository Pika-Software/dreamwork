_G = _G
import gpm, error from _G
import environment from gpm

import async, await, file, ModuleLoadError, MountError, SourceError from environment
import Compile, CompileLua, CompileMoon, CompileYue, IsFile from file
import BaseSource, BaseSourceHandler from gpm.loader
import getExtension, equal from environment.path
import Module from environment.package
import sub from environment.string

do

    import IsBinaryModuleInstalled from environment.util
    import require from _G

    class BinarySourceHandler extends BaseSourceHandler
        Install: async ( url ) =>
            name = url.hostname
            if not name or name == ""
                error SourceError "Binary module name is not specified!"
                return

            unless IsBinaryModuleInstalled( name )
                error SourceError "Binary module " .. name .. " is not installed locally!"
                return

            require( name )
            return _G[ name ]

    class BinarySource extends BaseSource

    BinarySource( "dll" )\RegisterHandler( BinarySourceHandler! )

do

    import MountGMA, MountZIP from file

    class GMAHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url.pathname ) == "gma"

        Install: async ( url ) =>
            ok, result = MountGMA( url.pathname )
            if ok
                return result

            error MountError result
            return

    class ZIPHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url.pathname ) == "zip"

        Install: async ( url ) =>
            return await MountZIP( url.pathname )

    class LuaHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return equal( sub( url.pathname, 1, 5 ), "/lua/" )

        FetchInfo: ( url ) =>
            yueConfig = {}
            for key, value in url.searchParams\iterator!
                yueConfig[ key ] = value

            return await Compile( url.pathname, nil, true, yueConfig )

        Install: async ( url, func, _, __, env ) =>
            if func
                Module( func, url, env )

                -- TODO: Review error handling
                return func!

            error ModuleLoadError "File '" .. url.pathname .. "' cannot be compiled."
            return

    class FileSource extends BaseSource

    fs = FileSource( "file" )
    fs\RegisterHandler( LuaHandler! )
    fs\RegisterHandler( ZIPHandler! )
    fs\RegisterHandler( GMAHandler! )
