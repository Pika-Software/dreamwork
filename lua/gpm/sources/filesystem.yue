_G = _G
import gpm, error from _G
import environment, Module from gpm
import async, await, file, ModuleLoadError, MountError, SourceError from environment
import Compile, CompileLua, CompileMoon, CompileYue, IsFile from file
import sub from environment.string
import BaseSource, BaseSourceHandler from gpm.loader
import getExtension, equal from environment.path

--[[

    Concept:

    package source
        npm like behavior ( i guess ) ( returns package object )

        Single File Package:
            package://pkg1.lua ( obviously /autorun files )

        Package:
            package://pkg2
                ||
                ||
                package.lua
                    ||
                    ||
                    init.lua

]]

do

    import IsBinaryModuleInstalled from environment.util
    import require from _G

    class BinarySourceHandler extends BaseSourceHandler
        FetchInfo: async ( url ) =>
            :hostname = url
            if not hostname or hostname == ""
                error SourceError "Binary module name is not specified!"

            return {
                installed: IsBinaryModuleInstalled( hostname ),
                name: hostname
            }

        Install: async ( _, info ) =>
            :name = info
            if info.installed
                require( name )
                return _G[ name ]

            error SourceError "Binary module " .. name .. " is not installed locally!"
            return

    class BinarySource extends BaseSource

    BinarySource( "binary", "dll" )\RegisterHandler( BinarySourceHandler! )

do

    import MountGMA, MountZIP from file

    class GMAHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url.pathname ) == "gma"

        FetchInfo: async ( url ) =>
            return url.pathname

        Install: async ( _, filePath ) =>
            ok, result = MountGMA( filePath )
            if ok
                return result

            error MountError result
            return

    class ZIPHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url.pathname ) == "zip"

        FetchInfo: async ( url ) =>
            return url.pathname

        Install: async ( _, filePath ) =>
            return await MountZIP( filePath )

    class LuaHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return equal( sub( url.pathname, 1, 5 ), "/lua/" )

        FetchInfo: ( url ) =>
            yueConfig = {}
            for key, value in url.searchParams\iterator!
                yueConfig[ key ] = value

            return await Compile( url.pathname, nil, true, yueConfig )

        Install: async ( url, func, _, __, env ) =>
            if func
                Module( func, url, env )

                -- TODO: Review error handling
                return func!

            error ModuleLoadError "File '" .. url.pathname .. "' cannot be compiled."
            return

    class FileSource extends BaseSource

    fs = FileSource( "file" )
    fs\RegisterHandler( LuaHandler! )
    fs\RegisterHandler( ZIPHandler! )
    fs\RegisterHandler( GMAHandler! )

do

    scheme2path = {
        "lua": "LUA"
    }

    class LuaSourceHandler extends BaseSourceHandler
        FetchInfo: async ( url ) =>
            :scheme = url
            gamePath = scheme2path[ scheme ] or scheme
            filePath = sub( url.pathname, 2 )

            yueConfig = {}
            for key, value in url.searchParams\iterator!
                yueConfig[ key ] = value

            return switch getExtension( filePath )
                when ""
                    await Compile( filePath, gamePath, true, yueConfig, true )

                when "lua"
                    unless IsFile( filePath, gamePath, true )
                        error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                    await CompileLua( filePath, gamePath, true, true )

                when "moon"
                    unless IsFile( filePath, gamePath, true )
                        error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                    await CompileMoon( filePath, gamePath, true, true )

                when "yue"
                    unless IsFile( filePath, gamePath, true )
                        error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                    await CompileYue( filePath, gamePath, true, yueConfig, true )

        Install: async ( url, func, _, __, env ) =>
            if func
                Module( func, url, env )

                -- TODO: Review error handling
                return func!

            error ModuleLoadError "File '" .. url.pathname .. "' cannot be compiled."
            return

    class LuaSource extends BaseSource

    ls = LuaSource( "lua", "lcl", "lsv" )
    ls\RegisterHandler( LuaSourceHandler! )
