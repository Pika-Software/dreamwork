_G = _G
import gpm from _G
import environment, loader from gpm
import GetExtensionFromFilename from gpm.string
import RegisterSource, SetFileEnvironment from loader
import async, await, file, path, ModuleLoadError from environment

--[[

    Handler List:
    [  ] lua://my_addon/init.lua ( lua, moon, yue )
    [  ] file://data/my_gma.gma ( gma, zip, lua, moon, yue )
    [  ] package://package_name ( package from lua/packages folder )

    Single File Package:
        lua://packages/pkg1.lua

    Multi-File Package:
        lua://packages/pkg2
            ||
            ||
            package.lua
                ||
                ||
                init.lua

]]

do

    import IsBinaryModuleInstalled from environment.util
    import require from _G

    class BinarySource extends loader.BaseSource
        FetchInfo: async ( url ) =>
            :hostname = url
            return {
                name: hostname
                installed: IsBinaryModuleInstalled( hostname )
            }

        Install: async ( _, info ) =>
            :name = info
            if info.installed
                require( name )
                return _G[ name ]

            error "Binary module " .. name .. " is not installed locally!"
            return

    BinarySource( "binary", "dll" )

class LuaSource extends loader.BaseSource
    FetchInfo: async ( url ) =>
        filePath = ( url.hostname or "" ) .. ( url.pathname or "" )
        unless GetExtensionFromFilename( filePath )
            filePath ..= ".lua"

        return filePath

    Install: async ( url, filePath, _, parentPackage, parentEnvironment ) =>
        func = await file.Compile( filePath, "LUA" )
        SetFileEnvironment( func, url.href, parentPackage, parentEnvironment )
        return func!

LuaSource( "lua", "moon", "yue" )

