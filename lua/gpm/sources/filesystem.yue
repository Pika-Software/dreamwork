_G = _G
import gpm from _G
import environment, loader from gpm
import BaseSource, BaseSourceHandler, SetFileEnvironment from loader
import GetExtensionFromFilename from environment.string
import async, await, file, path, ModuleLoadError from environment

--[[

    Concept:

    lua source, async compile and run ( returns function result )
        lua://path/to/file.{ext} ( will use specified extension {ext} )
        lua://my_addon/init ( yue, moon, lua )
        moon://my_addon/init ( same as lua:// )
        yue://my_addon/init ( same as lua:// )

    file source, file://path/to/file.{ext} ( depends on file extension )
        lua, moon, yue will compile and run ( returns function result )
        zip and gma will be mounted in the game ( returns mounted file list )

    package source
        npm like behavior ( i guess ) ( returns package object )

        Single File Package:
            package://pkg1.lua ( obviously /autorun files )

        Package:
            package://pkg2
                ||
                ||
                package.lua
                    ||
                    ||
                    init.lua

]]

do

    import IsBinaryModuleInstalled from environment.util
    import require from _G

    class BinarySourceHandler extends BaseSourceHandler
        FetchInfo: async ( url ) =>
            :hostname = url
            return {
                name: hostname
                installed: IsBinaryModuleInstalled( hostname )
            }

        Install: async ( _, info ) =>
            :name = info
            if info.installed
                require( name )
                return _G[ name ]

            error "Binary module " .. name .. " is not installed locally!"
            return

    class BinarySource extends BaseSource

    BinarySource( "binary", "dll" )\RegisterHandler( BinarySourceHandler! )

import Compile, CompileLua, CompileMoon, CompileYue, Exists from file

class LuaSourceHandler extends BaseSourceHandler
    FetchInfo: async ( url ) =>
        return ( url.hostname or "" ) .. ( url.pathname or "" )

    Install: async ( url, filePath, _, parentPackage, parentEnvironment ) =>
        local func

        switch GetExtensionFromFilename( filePath )
            when nil
                func = await Compile( filePath, "LUA" )

            when "lua"
                unless Exists( filePath, "LUA" )
                    error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                func = await CompileLua( filePath, "LUA" )

            when "moon"
                unless Exists( filePath, "LUA" )
                    error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                func = await CompileMoon( filePath, "LUA" )

            when "yue"
                unless Exists( filePath, "LUA" )
                    error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                func = await CompileYue( filePath, "LUA" )

        unless func
            error ModuleLoadError "File '" .. filePath .. "' cannot be compiled."
            return

        SetFileEnvironment( func, url.href, parentPackage, parentEnvironment )
        return func!

class LuaSource extends BaseSource

ls = LuaSource( "lua", "moon", "yue" )
ls\RegisterHandler( LuaSourceHandler! )
