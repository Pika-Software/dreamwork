_G = _G
import gpm from _G
import environment, Module from gpm
import async, await, file, ModuleLoadError from environment
import AsyncImport, BaseSource, BaseSourceHandler from gpm.loader
import Compile, CompileLua, CompileMoon, CompileYue, Exists from file
import GetExtensionFromFilename, gsub, match from environment.string

--[[

    Concept:

    lua source, async compile and run ( returns function result )
        lua://path/to/file.{ext} ( will use specified extension {ext} )
        lua://my_addon/init ( yue, moon, lua )
        moon://my_addon/init ( same as lua:// )
        yue://my_addon/init ( same as lua:// )

    file source, file://path/to/file.{ext} ( depends on file extension )
        lua, moon, yue will compile and run ( returns function result )
        zip and gma will be mounted in the game ( returns mounted file list )

    package source
        npm like behavior ( i guess ) ( returns package object )

        Single File Package:
            package://pkg1.lua ( obviously /autorun files )

        Package:
            package://pkg2
                ||
                ||
                package.lua
                    ||
                    ||
                    init.lua

]]

getExtension = ( url ) ->
    extension = url.extension
    unless extension
        extension = url.extension = GetExtensionFromFilename( url.pathname ) or ""

    return extension

getFullPath = ( url ) ->
    fullPath = url.fullpath
    unless fullPath
        fullPath = ( url.hostname or "" ) .. ( url.pathname or "" )
        switch url.scheme
            when "data"
                fullPath = "data/" .. fullPath

            when "cache"
                fullPath = "cache/" .. fullPath

        url.fullpath = fullPath

    return fullPath

do

    import IsBinaryModuleInstalled from environment.util
    import require from _G

    class BinarySourceHandler extends BaseSourceHandler
        FetchInfo: async ( url ) =>
            name = getFullPath( url )
            name = gsub( name, "^lua/bin/", "" )
            name = gsub( name, "%.dll.*$", "" )
            name = gsub( name, "gm[cs][lv]_", "" )
            name = gsub( name, "_%w+", "" )

            return {
                :name
                installed: IsBinaryModuleInstalled( name )
            }

        Install: async ( _, info ) =>
            :name = info
            if info.installed
                require( name )
                return _G[ name ]

            error "Binary module " .. name .. " is not installed locally!"
            return

    class BinarySource extends BaseSource

    BinarySource( "binary", "dll" )\RegisterHandler( BinarySourceHandler! )

do

    import MountGMA, MountZIP from file

    fetchInfo = async ( url ) =>
        return getFullPath( url )

    class GMAHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url ) == "gma"

        FetchInfo: fetchInfo

        Install: async ( _, filePath ) =>
            ok, result = MountGMA( filePath )
            if ok
                return result

            error result
            return

    class ZIPHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url ) == "zip"

        FetchInfo: fetchInfo

        Install: async ( _, filePath ) =>
            return await MountZIP( filePath )

    class LuaHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url ) == "lua"

        FetchInfo: fetchInfo

        Install: async ( url, filePath, _, __, parentEnvironment ) =>
            unless Exists( filePath, "GAME" )
                error ModuleLoadError "File '" .. filePath .. "' cannot be found."

            func = await CompileLua( filePath, "GAME" )
            unless func
                error ModuleLoadError "File '" .. filePath .. "' cannot be compiled."
                return

            Module( func, url.href, parentEnvironment )
            return func!

    class MoonHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url ) == "moon"

        FetchInfo: fetchInfo

        Install: async ( url, filePath, _, __, parentEnvironment ) =>
            unless Exists( filePath, "GAME" )
                error ModuleLoadError "File '" .. filePath .. "' cannot be found."

            func = await CompileMoon( filePath, "GAME" )
            unless func
                error ModuleLoadError "File '" .. filePath .. "' cannot be compiled."
                return

            Module( func, url.href, parentEnvironment )
            return func!

    class YueHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url ) == "yue"

        FetchInfo: fetchInfo

        Install: async ( url, filePath, _, __, parentEnvironment ) =>
            unless Exists( filePath, "GAME" )
                error ModuleLoadError "File '" .. filePath .. "' cannot be found."

            func = await CompileYue( filePath, "GAME" )
            unless func
                error ModuleLoadError "File '" .. filePath .. "' cannot be compiled."
                return

            Module( func, url.href, parentEnvironment )
            return func!

    class BinaryHandler extends BaseSourceHandler
        ShouldHandle: ( url ) =>
            return getExtension( url ) == "dll" or match( getFullPath( url ), "^lua/bin/([%w_]+)" )

        FetchInfo: async ( url ) =>
            return getFullPath( url )

        Install: async ( _, fullPath ) =>
            return AsyncImport( "binary://" .. fullPath )

    class FileSource extends BaseSource

    fs = FileSource( "file", "game", "data", "cache" )
    fs\RegisterHandler( GMAHandler! )
    fs\RegisterHandler( ZIPHandler! )
    fs\RegisterHandler( LuaHandler! )
    fs\RegisterHandler( MoonHandler! )
    fs\RegisterHandler( YueHandler! )
    fs\RegisterHandler( BinaryHandler! )

do

    class LuaSourceHandler extends BaseSourceHandler
        FetchInfo: async ( url ) =>
            return ( url.hostname or "" ) .. ( url.pathname or "" )

        Install: async ( url, filePath, _, __, parentEnvironment ) =>
            local func

            switch GetExtensionFromFilename( filePath )
                when nil
                    func = await Compile( filePath, "LUA" )

                when "lua"
                    unless Exists( filePath, "LUA" )
                        error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                    func = await CompileLua( filePath, "LUA" )

                when "moon"
                    unless Exists( filePath, "LUA" )
                        error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                    func = await CompileMoon( filePath, "LUA" )

                when "yue"
                    unless Exists( filePath, "LUA" )
                        error ModuleLoadError "File '" .. filePath .. "' cannot be found."

                    func = await CompileYue( filePath, "LUA" )

            unless func
                error ModuleLoadError "File '" .. filePath .. "' cannot be compiled."
                return

            Module( func, url.href, parentEnvironment )
            return func!

    class LuaSource extends BaseSource

    ls = LuaSource( "lua", "moon", "yue" )
    ls\RegisterHandler( LuaSourceHandler! )
