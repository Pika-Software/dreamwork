_G = _G
import gpm, error from _G
import environment from gpm
import concat from environment.table
import getDirectory from environment.path
import async, await, PackageError from environment
import BaseSource, BaseSourceHandler from gpm.loader
import sub, byte, find, match, len, ByteSplit from environment.string

--[[

    Concept:

    package source
        npm like behavior ( i guess ) ( returns package object )

        Single File Package:
            package://pkg1.lua ( obviously /autorun files )

        Package:
            package://pkg2
                ||
                ||
                package.lua
                    ||
                    ||
                    init.lua

]]



-- Resolves specifier as it is package specifier
-- See https://nodejs.org/api/esm.html#resolution-algorithm-specification PACKAGE_RESOLVE
class PackageHandler extends BaseSourceHandler
    FetchInfo: ( url, base, pkg, env ) =>


        -- packageDir = "/packages/" .. url.pathname

        -- local dir
        -- if base
        --     dir = sub( getDirectory( base.pathname ), 2, -2 )
        -- else
        --     dir = "lua/packages"

        -- path = ByteSplit( dir, 0x2F --[[ / ]] )

        -- for index = #path, 1, -1
        --     if path[ index ] ~= "packages"
        --         localPath = concat( path, "/", 1, index ) .. packageDir
        --         print localPath

        return

    Install: ( url, data ) =>
        return


class PackageSource extends BaseSource

PackageSource( "package" )\RegisterHandler( PackageHandler! )
