-- Seconds iteration of github source handler
import path, string, table, http, util, loader from gpm -- libraries
import isstring, istable, async, await from gpm -- functions

-- url syntax: github:user/repo[/branch]
-- github://[apiToken@]user/repo[/branch]
class GithubSource extends loader.Source
    APIRequest = ( url, ... ) ->
        headers = { "Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28" }
        if string.IsURL( url )
            params = ...
            if istable( params )
                table.Merge( headers, params )
        else
            parts = { "https://api.github.com", url }
            for arg in *{ ... }
                if isstring( arg )
                    parts[] = arg
                elseif istable( arg )
                    table.Merge( headers, arg )

            url = table.concat( parts, "/" )
        
        res = await http.CachedFetch( url, headers )
        if res.status == 200
            data = util.JSONToTable( res.body )
            unless data
                error SourceError "Failed to parse JSON response from #{url}."
            
            return data
        
        error SourceError "Failed to fetch #{url} (#{res.status})."

    GetDefaultBranch = ( user, repository, auth ) ->
        res = APIRequest( "repos", user, repository, auth ) -- GET /repos/:owner/:repo
        return res.default_branch

    WalkTreeForPackageInfo = ( tree ) ->
        local subfolder
        for entry in *tree
            if entry.type == "blob" and string.match( entry.path, "^package%..+$" )
                return entry

            if entry.type == "tree" and ( entry.path == "lua" or entry.path == "packages" or entry.path == repository )
                subfolder_url = entry.url
                -- TODO: FINISH THIS

    FindPackageInfo = ( user, repository, branch, auth ) ->
        local file_url
        local subfolder_url

        res = APIRequest( "repos", user, repository, "git", "trees", branch, auth ) -- GET /repos/:owner/:repo/git/trees/:tree_sha
        for entry in *res.tree
            if entry.type == "blob" and string.match( entry.path, "^package%..+$" )
                file_url = entry.url
                break

            if entry.path == "lua" or entry.path == "packages" or entry.path == repository
                subfolder_url = entry.url
    
        -- No package.lua in root, lets walk through subfolders and try to find it


        
    

    FetchInfo: async ( url ) =>
        segments = string.ByteSplit( url.pathname, 0x2F --[[ / ]] )
        if hostname := url.hostname
            insert( segments, 1, hostname )

        user = segments[ 1 ]
        repository = segments[ 2 ]
        unless user and user != "" and repository and repository != ""
            error SourceError "Invalid url '#{url}' (missing user or repository, got '#{user}' and '#{repository}')."
        
        auth = nil
        if url.username or url.password
            auth = { "Authorization": "Bearer " .. ( url.username or "" ) .. ( url.password or "" ) }

        branch = segments[ 3 ] or GetDefaultBranch( user, repository, auth )
        unless branch
            error SourceError "Failed to get default branch for '#{user}/#{repository}'."

        package_info_url = FindPackageInfo( user, repository, branch, auth )
        


GithubSource( "github" )
