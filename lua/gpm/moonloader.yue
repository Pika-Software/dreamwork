import util, Logger from gpm

if util.IsBinaryModuleInstalled( "moonloader" )
    local ok, msg = pcall( require, "moonloader" )
    if ok and istable( moonloader )
        Logger\Loaded( "gm_moonloader v%s", util.Version( moonloader._VERSION ) )
    else
        Logger\Error( "gm_moonloader startup error: %s", msg or "unknown error" )
        return

unless istable( moonloader )
    Logger\Warn( "gm_moonloader is missing, support for moon and yue scripts is unavailable!" )
    return

gpm.moonloader = moonloader

CompileString = CompileString
import ArgAssert from gpm
isfunction = isfunction
istable = istable
error = error

-- MoonScript
do

    import ToLua from moonloader

    util.CompileMoonString = ( moonCode, identifier, handleError ) ->
        ArgAssert( moonCode, "string", 1 )
        ArgAssert( identifier, "string", 2 )

        luaCode, msg = ToLua( moonCode )
        unless luaCode
            error( msg or "MoonScript compilation failed." )

        func = CompileString( luaCode, identifier, handleError == true )
        unless isfunction( func )
            error( msg or "MoonScript compilation failed." )

        return func

-- Yuescript
:yue = moonloader

unless istable( yue )
    Logger\Warn( "Yuescript support is missing, yue package execution is unavailable!" )
    return

import ToLua from yue

-- https://github.com/pigpigyyy/Yuescript/src/yuescript/yue_compiler.h#L28
util.CompileYueString = ( yueCode, identifier, handleError, yueConfig ) ->
    ArgAssert( yueCode, "string", 1 )
    ArgAssert( identifier, "string", 2 )

    if yueConfig ~= nil
        ArgAssert( yueConfig, "table", 4 )

    luaCode, msg = ToLua( yueCode, yueConfig )
    unless luaCode
        error( msg or "Yuescript compilation failed." )

    func = CompileString( luaCode, identifier, handleError == true )
    unless isfunction( func )
        error( msg or "Yuescript compilation failed." )

    return func
