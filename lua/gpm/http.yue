gpm = gpm
:ArgAssert, :metaworks, :Promise, :Logger, :util = gpm

lib = gpm.Table( gpm, "http", metaworks.CreateLink, http, true )
client, clientName = nil, nil
do

    clients = {
        {
            Name: "Garry's Mod",
            Client: "HTTP",
            Installed: true
        }
    }

    if SERVER
        table_insert = table.insert

        table_insert( clients, 1, {
            Client: "CHTTP",
            Name: "chttp"
        } )

        table_insert( clients, 1, {
            Client: "reqwest",
            Name: "reqwest"
        } )

    util_IsBinaryModuleInstalled = util.IsBinaryModuleInstalled
    require = require
    pcall = pcall

    for item in *clients
        if item.Installed or ( util_IsBinaryModuleInstalled( item.Name ) and pcall( require, item.Name ) )
            client, clientName = _G[ item.Client ], item.Name
            Logger\Info( "'%s' was connected as HTTP client.", item.Name )
            break

queue = {}
util.NextTick ->
    for func in *queue
        func!
    queue = nil

http_timeout = CreateConVar( "http_timeout", "10", FCVAR_ARCHIVE, "Default http timeout for gpm http library.", 3, 300 )\GetInt!
cvars.AddChangeCallback( "http_timeout"
    ( _, __, int ) ->
        http_timeout = tonumber( int ) or 10
"gLua Package Manager" )

:HTTPError = Promise
request = ( parameters, p ) ->
    if client( parameters ) or clientName ~= "Garry's Mod"
        Logger\Debug( "%s HTTP request to '%s', using '%s', with timeout %d seconds.", parameters.method, parameters.url, clientName, parameters.timeout )
    else
        p\Reject( HTTPError( "failed to make http request" ) )

isstring = isstring
isnumber = isnumber
istable = istable

HTTP = ( parameters ) ->
    ArgAssert( parameters, 1, "table" )
    p = Promise!

    unless isstring( parameters.method )
        parameters.method = "GET"

    unless isnumber( parameters.timeout )
        parameters.timeout = http_timeout

    unless istable( parameters.headers )
        parameters.headers = {}

    if clientName == "reqwest"
        userAgent = lib.UserAgent
        unless userAgent
            userAgent = string.format( "GLua Package Manager/%s - Garry's Mod/%s", gpm.VERSION, VERSIONSTR )
            lib.UserAgent = userAgent
        parameters.headers["User-Agent"] = userAgent

    parameters.success = ( code, body, headers ) -> p\Resolve( { :code, :body, :headers } )
    parameters.failed = ( msg ) ->
        p\Reject( HTTPError( msg ) )
        return -- for better stacktrace

    if queue ~= nil
        queue[ #queue + 1 ] = -> request( parameters )
    else
        request( parameters )
    return p
gpm.HTTP = HTTP

lib.Fetch = ( url, headers, timeout ) ->
    return HTTP( { :url, :headers, :timeout, method: "GET" } )

lib.Post = ( url, parameters, headers, timeout ) ->
    return HTTP( { :url, :parameters, :headers, :timeout, method: "POST" } )