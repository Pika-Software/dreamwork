gpm = gpm
import Environment from gpm
import async, await, string, error, Promise, URL, NotImplementedError from Environment

class SourceError extends Environment.Error
Environment.SourceError = SourceError

:sources = gpm
unless istable( sources )
    sources = gpm.Sources = {}

--[[

    file://path/to/file/in/game
    game://path/to/file/in/game
    data://path/to/file/in/data
    lua://path/to/file/in/lua

    Sources: {
        file: Source Obj1
        game: Source Obj1
        data: Source Obj1
        lua: Source Obj1
        http: Source Obj2
        https: Source Obj2
    }

]]

class gpm.BaseSourceHandler
    ShouldHandle: ( url ) =>
        return false

    FetchInfo: async ( url ) =>
        error NotImplementedError "Source:FetchInfo(url)"
        return

    Install: async ( url, info ) =>
        error NotImplementedError "Source:Install(url, info)"
        return

class gpm.BaseSource
    new: =>
        @handlers = {}

    RegisterHandler: ( handler ) =>
        @handlers[] = handler

    CallHandler: ( name, url, ... ) =>
        for handler in *@handlers
            if handler\ShouldHandle( url )
                return handler[name]( handler, url )

        return Promise.reject SourceError "No handler found for URL #{url} (#{name})"

    FetchInfo: ( url ) =>
        return @CallHandler( "FetchInfo", url )

    Install: ( url, info ) =>
        return @CallHandler( "Install", url, info )

gpm.RegisterSource = ( protocol, source ) ->
    sources[ protocol ] = source

gpm.ParsePackageURL = ( url ) ->
    if istable( url ) and url.__class == URL
        return url

    if isstring( url )
        unless string.IsURL( url )
            url = "package://" .. url
            unless string.IsURL( url )
                return

        return URL( url )

gpm.ValidatePackageURL = ( original_url ) ->
    url = gpm.ParsePackageURL( original_url )
    unless url
        error SourceError "Invalid url: #{original_url}"

    unless url.protocol
        error SourceError "Invalid protocol for url: #{original_url}"

    return url

gpm.FindSourceByURL = ( url ) ->
    src = sources[ url.protocol ]
    unless src
        error SourceError "No source found for URL #{url}"

    return src

gpm.FetchInfo = async ( url ) ->
    url = gpm.ValidatePackageURL( url )
    src = gpm.FindSourceByURL( url )
    return src\FetchInfo( url )

gpm.Install = async ( url, info ) ->
    url = gpm.ValidatePackageURL( url )
    src = gpm.FindSourceByURL( url )
    unless info
        info = await gpm.FetchInfo( url )

    return src\Install( url, info )
