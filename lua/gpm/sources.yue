gpm = gpm
import Environment from gpm
import async, await, string, isstring, IsURL, Promise, URL, NotImplementedError from Environment
import format from string

class SourceError extends Environment.Error
Environment.SourceError = SourceError

--[[

    file://path/to/file/in/game
    game://path/to/file/in/game
    data://path/to/file/in/data
    lua://path/to/file/in/lua

    Sources: {
        file: Source Obj1
        game: Source Obj1
        data: Source Obj1
        lua: Source Obj1
        http: Source Obj2
        https: Source Obj2
    }

]]

class gpm.BaseSourceHandler
    __tostring: =>
        return format( "%s: %p", @@__name or "unknown source handler", @ )

    FetchInfo: async ( url ) =>
        error NotImplementedError "Source:FetchInfo(url)"
        return

    Install: async ( url, info ) =>
        error NotImplementedError "Source:Install(url, info)"
        return

class gpm.BaseSource
    __tostring: =>
        return format( "%s: %p", @@__name or "unknown source", @ )

    new: =>
        @handlers = {}

    RegisterHandler: ( handler ) =>
        @handlers[] = handler

    CallHandler: ( name, url, ... ) =>
        for handler in *@handlers
            if not handler.ShouldHandle or handler\ShouldHandle( url, ... )
                return handler[ name ]( handler, url, ... )

        return Promise.reject SourceError "No handler found for URL #{url} (" .. name .. ")"

    FetchInfo: ( url ) =>
        return @CallHandler( "FetchInfo", url )

    Install: ( url, info ) =>
        return @CallHandler( "Install", url, info )

:sources = gpm
unless istable( sources )
    sources = gpm.Sources = {}

gpm.RegisterSource = ( scheme, source ) ->
    sources[ scheme ] = source

findSourceByURL = ( url ) ->
    src = sources[ url.scheme ]
    unless src
        error SourceError "No source found for URL: " .. url.href

    return src

gpm.FindSourceByURL = findSourceByURL

parsePackageURL = ( url ) ->
    if IsURL( url )
        return url

    if isstring( url ) and string.IsURL( url )
        return URL.parse( url )

gpm.ParsePackageURL = parsePackageURL

validatePackageURL = ( urlStr ) ->
    url = parsePackageURL( urlStr )
    unless url
        error SourceError "Invalid URL: " .. urlStr

    unless url.scheme
        error SourceError "Invalid protocol for URL: " .. urlStr

    return url

gpm.ValidatePackageURL = validatePackageURL

gpm.FetchInfo = async ( url ) ->
    url = validatePackageURL( url )
    return findSourceByURL( url )\FetchInfo( url )

gpm.Install = async ( url, info ) ->
    url = validatePackageURL( url )
    src = findSourceByURL( url )
    unless info
        info = await src\FetchInfo( url )

    return src\Install( url, info )
